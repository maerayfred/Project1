---
title: "Project1"
format: html
editor: source
---

## Data Processing
### Creating calling all the packages we need but coding so that they are not visable on the quarto document. 
```{r}
#| output: false
# Calling libraries
library(tidyverse)
library(tidycensus)
library(httr)
library(jsonlite)
library(glue)
source("test.R")
```

### In this step, we create the URL string, starting with the base URL and incorporating our default variables from get_vals. We set a default geography of state 10 (Delaware) to prevent unintended large API calls.

```{r}
build_url <- function(year="2022", get_vals=c("AGEP", "PWGTP", "SEX"), get_vals_subset=NULL, for_val="state:10") {
  # Builds the URL, assumes all values are valid and/or validation is done outside of this function
  BASE_URL <- glue("https://api.census.gov/data/{year}/acs/acs1/pums")
  get_vals_str <- ifelse((vals <- paste(get_vals, collapse=",")) != "", glue("get={vals}"), "")
  get_vals_subset_str <- paste(get_vals_subset, collapse="&")
  for_str <- ifelse(for_val != "", glue("for={for_val}"), "")
  suffix_list <- c(get_vals_str, get_vals_subset_str, for_str)
  suffix <- paste(suffix_list[suffix_list != ""], collapse="&")
  return(glue("{BASE_URL}?{suffix}"))
}

#Here, we provide an example for users to test different inputs (years, variables, geography) and view the resulting URL. 
example_build_url <- build_url(
  year="2022",
  get_vals=c("SEX", "PWGTP"),
  get_vals_subset = c("AGEP=00"),
  # get_vals_subset = c("HHL=0,1", "HHL=3,5", "JWAP=1:20", "HISPEED=0:10"),
  for_val = "state:10"
)
example_build_url
```

### We're creating a function to access API data, allowing the year to change with a default of 2022, along with a list of valid variables for the PUMS API.

```{r}
get_variable_list <- function(year="2022", subset=NULL) {
 # Accessing the URL that houses all the valid variables for the PUMS data. The default year is 2022 but can be changed. 
  URL_VARIABLES <- glue("https://api.census.gov/data/{year}/acs/acs1/pums/variables.json")
# The HTTR package will allow R to contact the website and the GET function will pull back the information from the website, but that data will be in JSON format.
  var_info <- httr::GET(URL_VARIABLES)
# The fromJSON function will return the data we are accessing into an R object. 
  var_info_parsed <- fromJSON(rawToChar(var_info$content))
# Here we are saving that data, which in this case is a list of valid variables as a tibble.
  var_info_tibble <- as_tibble(var_info_parsed)$variables

  if (is.null(subset)) {
    return(var_info_tibble)
  }

  var_data <- list()
  for (var in subset) {
    var_data[var] <- var_info_tibble[var]
  }

  return(var_data)
}
```

### We're accessing all valid API variables and subsetting them according to project instructions. We also create a function to check if the variables in the subset are numeric or character.

```{r}
example_get_variable_list <- get_variable_list()
example_all_var_list <- c("AGEP", "PWGTP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP", "SEX", "FER", "HHL", "HISPEED", "JWTRNS", "SCH", "SCHL", "REGION", "DIVISION", "ST")
example_filtered_var_list <- get_variable_list(subset=example_all_var_list)

is_numeric_variable <- function(var, var_info_tibble) {
    if (!is.null(var_info_tibble[[var]]$values$range) | var %in% c("JWAP", "JWDP")) {
      return (TRUE)
    }
    return (FALSE)
}

for (var in example_all_var_list) {
  print(paste(var, ifelse(is_numeric_variable(var, example_filtered_var_list), "numeric", "categorical")), sep=" ")
}

is_numeric_variable("test", example_get_variable_list)

get_valid_variable_values <- function(var, var_info_tibble) {
    var_range <- var_info_tibble[[var]]$values$range
    var_item <- var_info_tibble[[var]]$values$item

    ret <- c()

    if (!is.null(var_item)) {
        ret <- c(ret, names(var_item))
    }

    if (!is.null(var_range)) {
      min <- as.numeric(var_range$min)
      max <- as.numeric(var_range$max)
      ret <- c(ret, c(min=min,max=max))
    }

    return (ret)
}

print(get_valid_variable_values("AGEP", example_get_variable_list))
print(get_valid_variable_values("REGION", example_get_variable_list))
print(get_valid_variable_values("test", example_get_variable_list))
```









```{r}
## Utilizing Get Function to get information from API
URL <- "https://api.census.gov/data/2005/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:10&SCHL=16"
id_info <- httr::GET(URL)
str(id_info, max.level = 1)

```

```{r}
## Creating a tibble to view API information
parsed <- fromJSON(rawToChar(id_info$content))

info2 <- as_tibble(parsed[-1,])
colnames(info2)<-parsed[1,]

```




