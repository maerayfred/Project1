[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "# Calling libraries\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(glue)\nsource(\"test.R\")\n\n\n\n\n\nbuild_url &lt;- function(year=\"2022\", get_vals=c(\"AGEP\", \"PWGTP\", \"SEX\"), get_vals_subset=NULL, for_val=\"state:10\") {\n  # Builds the URL, assumes all values are valid and/or validation is done outside of this function\n  # Some defaults are provided, just to ensure a large API call URL isn't constructed on accident\n  BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n  get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse=\",\")) != \"\", glue(\"get={vals}\"), \"\")\n  get_vals_subset_str &lt;- paste(get_vals_subset, collapse=\"&\")\n  for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n  suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n  suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse=\"&\")\n  return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\n#Here we are creating an example fo the user to play with different inputs(years, variables, and geography) and see what URL is returned.  \nexample_build_url &lt;- build_url(\n  year=\"2022\",\n  get_vals=c(\"SEX\", \"PWGTP\"),\n  get_vals_subset = c(\"AGEP=00\"),\n  # get_vals_subset = c(\"HHL=0,1\", \"HHL=3,5\", \"JWAP=1:20\", \"HISPEED=0:10\"),\n  for_val = \"state:10\"\n)\nexample_build_url\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP&AGEP=00&for=state:10\n\n\n\n## Utilizing Get Function to get information from API\nURL &lt;- \"https://api.census.gov/data/2005/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:10&SCHL=16\"\nid_info &lt;- httr::GET(URL)\nstr(id_info, max.level = 1)\n\nList of 10\n $ url        : chr \"https://api.census.gov/data/2005/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:10&SCHL=16\"\n $ status_code: int 200\n $ headers    :List of 11\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    1 obs. of  7 variables:\n $ content    : raw [1:2856] 5b 5b 22 53 ...\n $ date       : POSIXct[1:1], format: \"2024-10-04 13:45:58\"\n $ times      : Named num [1:6] 0 0.000029 0 0.000141 0.201137 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\n\n\n## Creating a tibble to view API information\nparsed &lt;- fromJSON(rawToChar(id_info$content))\n\ninfo2 &lt;- as_tibble(parsed[-1,])\ncolnames(info2)&lt;-parsed[1,]"
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "Project1",
    "section": "",
    "text": "# Calling libraries\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(glue)\nsource(\"test.R\")\n\n\n\n\n\nbuild_url &lt;- function(year=\"2022\", get_vals=c(\"AGEP\", \"PWGTP\", \"SEX\"), get_vals_subset=NULL, for_val=\"state:10\") {\n  # Builds the URL, assumes all values are valid and/or validation is done outside of this function\n  # Some defaults are provided, just to ensure a large API call URL isn't constructed on accident\n  BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n  get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse=\",\")) != \"\", glue(\"get={vals}\"), \"\")\n  get_vals_subset_str &lt;- paste(get_vals_subset, collapse=\"&\")\n  for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n  suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n  suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse=\"&\")\n  return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\n#Here we are creating an example fo the user to play with different inputs(years, variables, and geography) and see what URL is returned.  \nexample_build_url &lt;- build_url(\n  year=\"2022\",\n  get_vals=c(\"SEX\", \"PWGTP\"),\n  get_vals_subset = c(\"AGEP=00\"),\n  # get_vals_subset = c(\"HHL=0,1\", \"HHL=3,5\", \"JWAP=1:20\", \"HISPEED=0:10\"),\n  for_val = \"state:10\"\n)\nexample_build_url\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP&AGEP=00&for=state:10\n\n\n\n## Utilizing Get Function to get information from API\nURL &lt;- \"https://api.census.gov/data/2005/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:10&SCHL=16\"\nid_info &lt;- httr::GET(URL)\nstr(id_info, max.level = 1)\n\nList of 10\n $ url        : chr \"https://api.census.gov/data/2005/acs/acs1/pums?get=SEX,PWGTP,MAR&for=state:10&SCHL=16\"\n $ status_code: int 200\n $ headers    :List of 11\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    1 obs. of  7 variables:\n $ content    : raw [1:2856] 5b 5b 22 53 ...\n $ date       : POSIXct[1:1], format: \"2024-10-04 13:45:58\"\n $ times      : Named num [1:6] 0 0.000029 0 0.000141 0.201137 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\n\n\n## Creating a tibble to view API information\nparsed &lt;- fromJSON(rawToChar(id_info$content))\n\ninfo2 &lt;- as_tibble(parsed[-1,])\ncolnames(info2)&lt;-parsed[1,]"
  }
]