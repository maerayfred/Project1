[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "# Calling libraries\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(glue)\n\n\n\n\n\nsource(\"src/census_query.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\nsource(\"test/test_census_query.R\")\ntest_1\n\nfunction () \n{\n    URL &lt;- census_url()\n    return(URL)\n}\n\ntest_1()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2\n\nfunction () \n{\n    URL &lt;- census_url(get_vals = NULL, get_vals_subset = NULL, \n        for_val = NULL)\n    return(URL)\n}\n\ntest_2()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3\n\nfunction () \n{\n    URL &lt;- census_url(year = 2021, get_vals = c(\"HISPEED\", \"PWGTP\"), \n        get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:35\"), \n        for_val = \"region:1\")\n    return(URL)\n}\n\ntest_3()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:35&for=region:1\n\ntest_4\n\nfunction () \n{\n    URL &lt;- test_3()\n    return(census_tibble(URL))\n}\n\ntest_4()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n# A tibble: 58 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 1       328   0     2     35    1     \n 2 1       216   0     2     35    1     \n 3 1       202   0     2     33    1     \n 4 1       237   0     2     31    1     \n 5 1       74    0     2     33    1     \n 6 1       140   0     2     35    1     \n 7 2       315   0     2     32    1     \n 8 0       75    0     2     35    1     \n 9 2       173   0     2     35    1     \n10 2       190   0     2     32    1     \n# ℹ 48 more rows\n\n\n\n\n\n\nsource(\"src/census_variables.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n&lt;bytecode: 0x7fac6601dba0&gt;\n\nsource(\"test/test_census_query.R\")\ntest_1\n\nfunction () \n{\n    URL &lt;- census_url()\n    return(URL)\n}\n\ntest_1()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2\n\nfunction () \n{\n    URL &lt;- census_url(get_vals = NULL, get_vals_subset = NULL, \n        for_val = NULL)\n    return(URL)\n}\n\ntest_2()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3\n\nfunction () \n{\n    URL &lt;- census_url(year = 2021, get_vals = c(\"HISPEED\", \"PWGTP\"), \n        get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:35\"), \n        for_val = \"region:1\")\n    return(URL)\n}\n\ntest_3()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:35&for=region:1\n\ntest_4\n\nfunction () \n{\n    URL &lt;- test_3()\n    return(census_tibble(URL))\n}\n\ntest_4()\n\n# A tibble: 58 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 0       239   0     2     32    1     \n 2 2       383   0     2     35    1     \n 3 1       118   0     2     31    1     \n 4 1       233   0     2     32    1     \n 5 1       234   0     2     32    1     \n 6 1       215   0     2     31    1     \n 7 1       112   0     2     31    1     \n 8 1       65    0     2     32    1     \n 9 1       43    0     2     32    1     \n10 1       109   0     2     30    1     \n# ℹ 48 more rows\n\n\n\n\n\n\nsource(\"src/input_validation.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n&lt;bytecode: 0x7fac6601dba0&gt;\n\nsource(\"test/test_input_validation.R\")\ntest_1\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP=abc\", \"PWGTP=123\", \"SEX=\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_1()\n\n[1] TRUE\n\ntest_2\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP:abc\", \"PWGTP:123\", \"SEX:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_2()\n\n[1] TRUE\n\ntest_3\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    valid_given_lists &lt;- list(\"state:\", c(\"state:\", \"division:5\"), \n        c(\"state:\", \"division:\", \"region:\"), c(\"state:abc\", \"division:123\", \n            \"region:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_3()\n\n[1] TRUE\n\ntest_4\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX=1\"), c(\"AGEP\", \"PWGTP:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_4()\n\n[1] TRUE\n\ntest_5\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX:1\"), c(\"AGEP\", \"PWGTP=1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_5()\n\n[1] TRUE\n\ntest_6\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    invalid_given_lists &lt;- list(\"state\", c(\"state:\", \"division=5\"), \n        c(\"state:\", \"division:\", \"region\"), c(\"state:abc\", \"division:123\", \n            \"ST:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_6()\n\n[1] TRUE\n\n\n\n\n\n\nsource(\"src/main.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\nsource(\"test/test_main.R\")\n\nValid variables: AGEP, PWGTP, GASP, GRPIP, JWAP, JWDP, JWMNP, SEX, FER, HHL, HISPEED, JWTRNS, SCH, SCHL\n[1] \"AGEP NA\"\n      min  max \n\"00\"  \"1\" \"99\" \n[1] \"PWGTP NA\"\n min  max \n   1 9999 \n[1] \"GASP NA\"\n          min    max \n   \"3\"    \"4\" \"9999\" \n[1] \"GRPIP NA\"\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n[1] \"JWAP NA\"\n  [1] \"258\" \"260\" \"261\" \"274\" \"048\" \"058\" \"076\" \"091\" \"094\" \"122\" \"142\" \"146\"\n [13] \"163\" \"165\" \"171\" \"184\" \"189\" \"192\" \"198\" \"210\" \"218\" \"220\" \"221\" \"222\"\n [25] \"224\" \"227\" \"228\" \"251\" \"256\" \"259\" \"262\" \"270\" \"271\" \"276\" \"284\" \"006\"\n [37] \"008\" \"009\" \"011\" \"017\" \"020\" \"031\" \"039\" \"053\" \"065\" \"075\" \"085\" \"090\"\n [49] \"101\" \"107\" \"121\" \"124\" \"137\" \"156\" \"164\" \"173\" \"197\" \"202\" \"234\" \"235\"\n [61] \"246\" \"249\" \"257\" \"273\" \"277\" \"002\" \"004\" \"015\" \"034\" \"035\" \"042\" \"044\"\n [73] \"050\" \"052\" \"055\" \"069\" \"071\" \"077\" \"079\" \"082\" \"089\" \"092\" \"093\" \"097\"\n [85] \"117\" \"118\" \"129\" \"132\" \"138\" \"144\" \"148\" \"150\" \"152\" \"166\" \"181\" \"183\"\n [97] \"205\" \"219\" \"230\" \"233\" \"239\" \"244\" \"254\" \"265\" \"272\" \"013\" \"014\" \"019\"\n[109] \"022\" \"033\" \"037\" \"041\" \"059\" \"067\" \"068\" \"074\" \"080\" \"084\" \"088\" \"095\"\n[121] \"100\" \"125\" \"140\" \"172\" \"178\" \"182\" \"185\" \"187\" \"199\" \"206\" \"208\" \"209\"\n[133] \"243\" \"268\" \"269\" \"279\" \"001\" \"005\" \"007\" \"023\" \"025\" \"029\" \"036\" \"043\"\n[145] \"046\" \"051\" \"056\" \"073\" \"081\" \"098\" \"103\" \"106\" \"114\" \"135\" \"143\" \"149\"\n[157] \"157\" \"158\" \"160\" \"170\" \"174\" \"179\" \"194\" \"196\" \"211\" \"212\" \"214\" \"241\"\n[169] \"264\" \"266\" \"016\" \"018\" \"021\" \"028\" \"054\" \"060\" \"064\" \"070\" \"078\" \"087\"\n[181] \"105\" \"111\" \"119\" \"123\" \"126\" \"134\" \"139\" \"141\" \"151\" \"153\" \"169\" \"180\"\n[193] \"203\" \"204\" \"207\" \"215\" \"216\" \"217\" \"223\" \"225\" \"247\" \"248\" \"252\" \"253\"\n[205] \"255\" \"263\" \"267\" \"278\" \"280\" \"281\" \"282\" \"0\"   \"003\" \"010\" \"038\" \"049\"\n[217] \"057\" \"061\" \"062\" \"072\" \"083\" \"104\" \"108\" \"116\" \"128\" \"133\" \"136\" \"147\"\n[229] \"154\" \"155\" \"161\" \"162\" \"167\" \"175\" \"177\" \"186\" \"190\" \"191\" \"193\" \"200\"\n[241] \"201\" \"226\" \"232\" \"236\" \"237\" \"238\" \"240\" \"242\" \"245\" \"250\" \"275\" \"283\"\n[253] \"285\" \"012\" \"024\" \"026\" \"027\" \"030\" \"032\" \"040\" \"045\" \"047\" \"063\" \"066\"\n[265] \"086\" \"096\" \"099\" \"102\" \"109\" \"110\" \"112\" \"113\" \"115\" \"120\" \"127\" \"130\"\n[277] \"131\" \"145\" \"159\" \"168\" \"176\" \"188\" \"195\" \"213\" \"229\" \"231\"\n[1] \"JWDP NA\"\n  [1] \"014\" \"015\" \"017\" \"022\" \"035\" \"046\" \"065\" \"068\" \"076\" \"079\" \"083\" \"085\"\n [13] \"086\" \"103\" \"105\" \"118\" \"127\" \"130\" \"131\" \"139\" \"141\" \"149\" \"057\" \"059\"\n [25] \"063\" \"066\" \"073\" \"078\" \"100\" \"101\" \"104\" \"107\" \"111\" \"116\" \"128\" \"150\"\n [37] \"0\"   \"010\" \"011\" \"019\" \"028\" \"044\" \"045\" \"047\" \"049\" \"053\" \"055\" \"056\"\n [49] \"084\" \"090\" \"092\" \"110\" \"112\" \"120\" \"132\" \"133\" \"134\" \"009\" \"023\" \"031\"\n [61] \"038\" \"040\" \"050\" \"060\" \"062\" \"064\" \"067\" \"069\" \"082\" \"095\" \"096\" \"097\"\n [73] \"119\" \"121\" \"135\" \"003\" \"033\" \"036\" \"041\" \"061\" \"081\" \"093\" \"098\" \"102\"\n [85] \"109\" \"115\" \"126\" \"143\" \"145\" \"001\" \"006\" \"012\" \"013\" \"016\" \"025\" \"026\"\n [97] \"030\" \"077\" \"087\" \"088\" \"094\" \"106\" \"108\" \"122\" \"123\" \"124\" \"144\" \"002\"\n[109] \"004\" \"005\" \"007\" \"020\" \"021\" \"024\" \"027\" \"034\" \"039\" \"042\" \"043\" \"048\"\n[121] \"051\" \"058\" \"072\" \"074\" \"075\" \"091\" \"113\" \"117\" \"125\" \"129\" \"136\" \"137\"\n[133] \"140\" \"008\" \"018\" \"029\" \"032\" \"037\" \"052\" \"054\" \"070\" \"071\" \"080\" \"089\"\n[145] \"099\" \"114\" \"138\" \"142\" \"146\" \"147\" \"148\"\n[1] \"JWMNP NA\"\n        min   max \n  \"0\"   \"1\" \"200\" \n[1] \"SEX NA\"\n[1] \"1\" \"2\"\n[1] \"FER NA\"\n[1] \"0\" \"2\" \"1\"\n[1] \"HHL NA\"\n[1] \"0\" \"2\" \"3\" \"1\" \"4\" \"5\"\n[1] \"HISPEED NA\"\n[1] \"2\" \"1\" \"0\"\n[1] \"JWTRNS NA\"\n [1] \"11\" \"07\" \"02\" \"05\" \"0\"  \"12\" \"04\" \"09\" \"01\" \"03\" \"06\" \"10\" \"08\"\n[1] \"SCH NA\"\n[1] \"0\" \"3\" \"1\" \"2\"\n[1] \"SCHL NA\"\n [1] \"16\" \"01\" \"04\" \"03\" \"07\" \"23\" \"19\" \"22\" \"10\" \"20\" \"0\"  \"02\" \"21\" \"08\" \"24\"\n[16] \"06\" \"14\" \"17\" \"12\" \"15\" \"13\" \"05\" \"11\" \"18\" \"09\"\nNumeric item list, gets converted to int - [AGEP, PWGTP, GASP, GRPIP, JWAP, JWDP, JWMNP]\nList without JWAP and JWDP - [AGEP, PWGTP, GASP, GRPIP, JWMNP]\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\ntibble [9,569 × 15] (S3: tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ..."
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "Project1",
    "section": "",
    "text": "# Calling libraries\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(glue)\n\n\n\n\n\nsource(\"src/census_query.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\nsource(\"test/test_census_query.R\")\ntest_1\n\nfunction () \n{\n    URL &lt;- census_url()\n    return(URL)\n}\n\ntest_1()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2\n\nfunction () \n{\n    URL &lt;- census_url(get_vals = NULL, get_vals_subset = NULL, \n        for_val = NULL)\n    return(URL)\n}\n\ntest_2()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3\n\nfunction () \n{\n    URL &lt;- census_url(year = 2021, get_vals = c(\"HISPEED\", \"PWGTP\"), \n        get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:35\"), \n        for_val = \"region:1\")\n    return(URL)\n}\n\ntest_3()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:35&for=region:1\n\ntest_4\n\nfunction () \n{\n    URL &lt;- test_3()\n    return(census_tibble(URL))\n}\n\ntest_4()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n# A tibble: 58 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 1       328   0     2     35    1     \n 2 1       216   0     2     35    1     \n 3 1       202   0     2     33    1     \n 4 1       237   0     2     31    1     \n 5 1       74    0     2     33    1     \n 6 1       140   0     2     35    1     \n 7 2       315   0     2     32    1     \n 8 0       75    0     2     35    1     \n 9 2       173   0     2     35    1     \n10 2       190   0     2     32    1     \n# ℹ 48 more rows\n\n\n\n\n\n\nsource(\"src/census_variables.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n&lt;bytecode: 0x7fac6601dba0&gt;\n\nsource(\"test/test_census_query.R\")\ntest_1\n\nfunction () \n{\n    URL &lt;- census_url()\n    return(URL)\n}\n\ntest_1()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2\n\nfunction () \n{\n    URL &lt;- census_url(get_vals = NULL, get_vals_subset = NULL, \n        for_val = NULL)\n    return(URL)\n}\n\ntest_2()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3\n\nfunction () \n{\n    URL &lt;- census_url(year = 2021, get_vals = c(\"HISPEED\", \"PWGTP\"), \n        get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:35\"), \n        for_val = \"region:1\")\n    return(URL)\n}\n\ntest_3()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:35&for=region:1\n\ntest_4\n\nfunction () \n{\n    URL &lt;- test_3()\n    return(census_tibble(URL))\n}\n\ntest_4()\n\n# A tibble: 58 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 0       239   0     2     32    1     \n 2 2       383   0     2     35    1     \n 3 1       118   0     2     31    1     \n 4 1       233   0     2     32    1     \n 5 1       234   0     2     32    1     \n 6 1       215   0     2     31    1     \n 7 1       112   0     2     31    1     \n 8 1       65    0     2     32    1     \n 9 1       43    0     2     32    1     \n10 1       109   0     2     30    1     \n# ℹ 48 more rows\n\n\n\n\n\n\nsource(\"src/input_validation.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n&lt;bytecode: 0x7fac6601dba0&gt;\n\nsource(\"test/test_input_validation.R\")\ntest_1\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP=abc\", \"PWGTP=123\", \"SEX=\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_1()\n\n[1] TRUE\n\ntest_2\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP:abc\", \"PWGTP:123\", \"SEX:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_2()\n\n[1] TRUE\n\ntest_3\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    valid_given_lists &lt;- list(\"state:\", c(\"state:\", \"division:5\"), \n        c(\"state:\", \"division:\", \"region:\"), c(\"state:abc\", \"division:123\", \n            \"region:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_3()\n\n[1] TRUE\n\ntest_4\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX=1\"), c(\"AGEP\", \"PWGTP:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_4()\n\n[1] TRUE\n\ntest_5\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX:1\"), c(\"AGEP\", \"PWGTP=1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_5()\n\n[1] TRUE\n\ntest_6\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    invalid_given_lists &lt;- list(\"state\", c(\"state:\", \"division=5\"), \n        c(\"state:\", \"division:\", \"region\"), c(\"state:abc\", \"division:123\", \n            \"ST:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_6()\n\n[1] TRUE\n\n\n\n\n\n\nsource(\"src/main.R\")\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\nsource(\"test/test_main.R\")\n\nValid variables: AGEP, PWGTP, GASP, GRPIP, JWAP, JWDP, JWMNP, SEX, FER, HHL, HISPEED, JWTRNS, SCH, SCHL\n[1] \"AGEP NA\"\n      min  max \n\"00\"  \"1\" \"99\" \n[1] \"PWGTP NA\"\n min  max \n   1 9999 \n[1] \"GASP NA\"\n          min    max \n   \"3\"    \"4\" \"9999\" \n[1] \"GRPIP NA\"\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n[1] \"JWAP NA\"\n  [1] \"258\" \"260\" \"261\" \"274\" \"048\" \"058\" \"076\" \"091\" \"094\" \"122\" \"142\" \"146\"\n [13] \"163\" \"165\" \"171\" \"184\" \"189\" \"192\" \"198\" \"210\" \"218\" \"220\" \"221\" \"222\"\n [25] \"224\" \"227\" \"228\" \"251\" \"256\" \"259\" \"262\" \"270\" \"271\" \"276\" \"284\" \"006\"\n [37] \"008\" \"009\" \"011\" \"017\" \"020\" \"031\" \"039\" \"053\" \"065\" \"075\" \"085\" \"090\"\n [49] \"101\" \"107\" \"121\" \"124\" \"137\" \"156\" \"164\" \"173\" \"197\" \"202\" \"234\" \"235\"\n [61] \"246\" \"249\" \"257\" \"273\" \"277\" \"002\" \"004\" \"015\" \"034\" \"035\" \"042\" \"044\"\n [73] \"050\" \"052\" \"055\" \"069\" \"071\" \"077\" \"079\" \"082\" \"089\" \"092\" \"093\" \"097\"\n [85] \"117\" \"118\" \"129\" \"132\" \"138\" \"144\" \"148\" \"150\" \"152\" \"166\" \"181\" \"183\"\n [97] \"205\" \"219\" \"230\" \"233\" \"239\" \"244\" \"254\" \"265\" \"272\" \"013\" \"014\" \"019\"\n[109] \"022\" \"033\" \"037\" \"041\" \"059\" \"067\" \"068\" \"074\" \"080\" \"084\" \"088\" \"095\"\n[121] \"100\" \"125\" \"140\" \"172\" \"178\" \"182\" \"185\" \"187\" \"199\" \"206\" \"208\" \"209\"\n[133] \"243\" \"268\" \"269\" \"279\" \"001\" \"005\" \"007\" \"023\" \"025\" \"029\" \"036\" \"043\"\n[145] \"046\" \"051\" \"056\" \"073\" \"081\" \"098\" \"103\" \"106\" \"114\" \"135\" \"143\" \"149\"\n[157] \"157\" \"158\" \"160\" \"170\" \"174\" \"179\" \"194\" \"196\" \"211\" \"212\" \"214\" \"241\"\n[169] \"264\" \"266\" \"016\" \"018\" \"021\" \"028\" \"054\" \"060\" \"064\" \"070\" \"078\" \"087\"\n[181] \"105\" \"111\" \"119\" \"123\" \"126\" \"134\" \"139\" \"141\" \"151\" \"153\" \"169\" \"180\"\n[193] \"203\" \"204\" \"207\" \"215\" \"216\" \"217\" \"223\" \"225\" \"247\" \"248\" \"252\" \"253\"\n[205] \"255\" \"263\" \"267\" \"278\" \"280\" \"281\" \"282\" \"0\"   \"003\" \"010\" \"038\" \"049\"\n[217] \"057\" \"061\" \"062\" \"072\" \"083\" \"104\" \"108\" \"116\" \"128\" \"133\" \"136\" \"147\"\n[229] \"154\" \"155\" \"161\" \"162\" \"167\" \"175\" \"177\" \"186\" \"190\" \"191\" \"193\" \"200\"\n[241] \"201\" \"226\" \"232\" \"236\" \"237\" \"238\" \"240\" \"242\" \"245\" \"250\" \"275\" \"283\"\n[253] \"285\" \"012\" \"024\" \"026\" \"027\" \"030\" \"032\" \"040\" \"045\" \"047\" \"063\" \"066\"\n[265] \"086\" \"096\" \"099\" \"102\" \"109\" \"110\" \"112\" \"113\" \"115\" \"120\" \"127\" \"130\"\n[277] \"131\" \"145\" \"159\" \"168\" \"176\" \"188\" \"195\" \"213\" \"229\" \"231\"\n[1] \"JWDP NA\"\n  [1] \"014\" \"015\" \"017\" \"022\" \"035\" \"046\" \"065\" \"068\" \"076\" \"079\" \"083\" \"085\"\n [13] \"086\" \"103\" \"105\" \"118\" \"127\" \"130\" \"131\" \"139\" \"141\" \"149\" \"057\" \"059\"\n [25] \"063\" \"066\" \"073\" \"078\" \"100\" \"101\" \"104\" \"107\" \"111\" \"116\" \"128\" \"150\"\n [37] \"0\"   \"010\" \"011\" \"019\" \"028\" \"044\" \"045\" \"047\" \"049\" \"053\" \"055\" \"056\"\n [49] \"084\" \"090\" \"092\" \"110\" \"112\" \"120\" \"132\" \"133\" \"134\" \"009\" \"023\" \"031\"\n [61] \"038\" \"040\" \"050\" \"060\" \"062\" \"064\" \"067\" \"069\" \"082\" \"095\" \"096\" \"097\"\n [73] \"119\" \"121\" \"135\" \"003\" \"033\" \"036\" \"041\" \"061\" \"081\" \"093\" \"098\" \"102\"\n [85] \"109\" \"115\" \"126\" \"143\" \"145\" \"001\" \"006\" \"012\" \"013\" \"016\" \"025\" \"026\"\n [97] \"030\" \"077\" \"087\" \"088\" \"094\" \"106\" \"108\" \"122\" \"123\" \"124\" \"144\" \"002\"\n[109] \"004\" \"005\" \"007\" \"020\" \"021\" \"024\" \"027\" \"034\" \"039\" \"042\" \"043\" \"048\"\n[121] \"051\" \"058\" \"072\" \"074\" \"075\" \"091\" \"113\" \"117\" \"125\" \"129\" \"136\" \"137\"\n[133] \"140\" \"008\" \"018\" \"029\" \"032\" \"037\" \"052\" \"054\" \"070\" \"071\" \"080\" \"089\"\n[145] \"099\" \"114\" \"138\" \"142\" \"146\" \"147\" \"148\"\n[1] \"JWMNP NA\"\n        min   max \n  \"0\"   \"1\" \"200\" \n[1] \"SEX NA\"\n[1] \"1\" \"2\"\n[1] \"FER NA\"\n[1] \"0\" \"2\" \"1\"\n[1] \"HHL NA\"\n[1] \"0\" \"2\" \"3\" \"1\" \"4\" \"5\"\n[1] \"HISPEED NA\"\n[1] \"2\" \"1\" \"0\"\n[1] \"JWTRNS NA\"\n [1] \"11\" \"07\" \"02\" \"05\" \"0\"  \"12\" \"04\" \"09\" \"01\" \"03\" \"06\" \"10\" \"08\"\n[1] \"SCH NA\"\n[1] \"0\" \"3\" \"1\" \"2\"\n[1] \"SCHL NA\"\n [1] \"16\" \"01\" \"04\" \"03\" \"07\" \"23\" \"19\" \"22\" \"10\" \"20\" \"0\"  \"02\" \"21\" \"08\" \"24\"\n[16] \"06\" \"14\" \"17\" \"12\" \"15\" \"13\" \"05\" \"11\" \"18\" \"09\"\nNumeric item list, gets converted to int - [AGEP, PWGTP, GASP, GRPIP, JWAP, JWDP, JWMNP]\nList without JWAP and JWDP - [AGEP, PWGTP, GASP, GRPIP, JWMNP]\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\ntibble [9,569 × 15] (S3: tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ..."
  }
]