[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "library(glue)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncensus_url &lt;- function(year=\"2022\", get_vals=c(\"AGEP\", \"PWGTP\", \"SEX\"), get_vals_subset=NULL, for_val=\"state:10\") {\n  # Builds the URL, assumes all values are valid and/or validation is done outside of this function\n  # Some defaults are provided, just to ensure a large API call URL isn't constructed on accident\n\n  BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n  get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse=\",\")) != \"\", glue(\"get={vals}\"), \"\")\n  get_vals_subset_str &lt;- paste(get_vals_subset, collapse=\"&\")\n  for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n  suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n  suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse=\"&\")\n  return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\ncensus_tibble &lt;- function(URL) {\n  # Given a census_url, this function will return a tibble of the data\n  id_info &lt;- httr::GET(URL)\n\n  ## Creating a tibble to view API information\n  parsed &lt;- fromJSON(rawToChar(id_info$content))\n\n  parsed_tibble &lt;- as_tibble(parsed[-1,])\n  colnames(parsed_tibble) &lt;- parsed[1,]\n\n  return (parsed_tibble)\n}\n\n\nsource(\"src/census_query.R\")\n\ntest_1_cq &lt;- function() {\n  # test default\n  URL &lt;- census_url()\n  \n  return (URL)\n}\n\ntest_2_cq &lt;- function() {\n  # test omissions of variables\n  URL &lt;- census_url(get_vals=NULL, get_vals_subset=NULL, for_val=NULL)\n  \n  return (URL)\n}\n\ntest_3_cq &lt;- function() {\n  # test providing values use, no validations\n  URL &lt;- census_url(\n    year=2021,\n    get_vals = c(\"HISPEED\", \"PWGTP\"),\n    get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:32\"),\n    for_val = \"region:1\"\n  )\n  return (URL)\n}\n\ntest_4_cq &lt;- function() {\n  # test using URL to get the same data in a tibble\n  URL &lt;- test_3_cq()\n  return (census_tibble(URL))\n}\n\n# data_1_cq &lt;- test_1_cq()\n# data_2_cq &lt;- test_2_cq()\n# data_3_cq &lt;- test_3_cq()\n# data_4_cq &lt;- test_4_cq()\n\n\ntest_1_cq()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2_cq()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3_cq()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:32&for=region:1\n\ntest_4_cq()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n# A tibble: 33 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 1       213   0     2     30    1     \n 2 1       222   0     2     30    1     \n 3 1       196   0     2     30    1     \n 4 1       128   0     2     32    1     \n 5 1       63    0     2     32    1     \n 6 1       188   0     2     30    1     \n 7 1       301   0     2     30    1     \n 8 1       402   0     2     31    1     \n 9 2       157   0     2     32    1     \n10 0       239   0     2     32    1     \n# ℹ 23 more rows\n\n\n\n\n\n\nlibrary(\"glue\")\nlibrary(\"jsonlite\")\nlibrary(\"tidyverse\")\nlibrary(\"httr\")\n\nget_variable_list &lt;- function(year=\"2022\", subset=NULL) {\n  # Get the full variable list for the given year, with option to filter the list down to a subset\n  URL_VARIABLES &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums/variables.json\")\n  var_info &lt;- httr::GET(URL_VARIABLES)\n  var_info_parsed &lt;- fromJSON(rawToChar(var_info$content))\n  var_info_tibble &lt;- as_tibble(var_info_parsed)$variables\n\n  if (is.null(subset)) {\n    return(var_info_tibble)\n  }\n\n  var_data &lt;- list()\n  for (var in subset) {\n    var_data[var] &lt;- var_info_tibble[var]\n  }\n\n  return(var_data)\n}\n\nis_numeric_variable &lt;- function(var, var_info_tibble) {\n  # check if a value is numeric - meaning range is provided and or it is a specific named date variable\n  if (!is.null(var_info_tibble[[var]]$values$range) | var %in% c(\"JWAP\", \"JWDP\")) {\n    return (TRUE)\n  }\n  return (FALSE)\n}\n\nget_valid_variable_values &lt;- function(var, var_info_tibble) {\n  # get an output to see the valid variables that can be had (the items and the range)\n  # items are just placed into the list, the range pulls the named items of min and max\n  var_range &lt;- var_info_tibble[[var]]$values$range\n  var_item &lt;- var_info_tibble[[var]]$values$item\n\n  ret &lt;- NULL\n\n  if (!is.null(var_item)) {\n    ret &lt;- c(ret, names(var_item))\n  }\n\n  if (!is.null(var_range)) {\n    min &lt;- as.numeric(var_range$min)\n    max &lt;- as.numeric(var_range$max)\n    ret &lt;- c(ret, c(min=min,max=max))\n  }\n\n  return (ret)\n}\n\nis_valid_variable_value &lt;- function(val, var, var_info_tibble) {\n  # give a value for a variable, check if it is valid\n  valid_values &lt;- get_valid_variable_values(var, var_info_tibble)\n\n  if (val %in% valid_values) {\n    return (TRUE)\n  }\n\n  # if names contains min and max both, there was a range provided\n  if (\"min\" %in% names(valid_values) & \"max\" %in% names(valid_values)) {\n    min &lt;- as.numeric(valid_values[\"min\"])\n    max &lt;- as.numeric(valid_values[\"max\"])\n    num_val &lt;- as.numeric(val)\n    return (num_val &gt;= min & num_val &lt;= max)\n  }\n\n  return (FALSE)\n}\n\n\nsource(\"src/census_variables.R\")\n\ntest_1_cv &lt;- function () {\n  # test default get all\n  var_list &lt;- get_variable_list()\n  return (var_list)\n}\n\ntest_2_cv &lt;- function () {\n  # test get specific\n  var_list &lt;- get_variable_list(subset=\"PWGTP\")\n  return (var_list)\n}\n\ntest_3_cv &lt;- function () {\n  # test if a variable is numeric or not from all the desired variables\n  all_var_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"REGION\", \"DIVISION\", \"ST\")\n  numeric_var_list &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\")\n  categorical_var_list &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\", \"REGION\", \"DIVISION\", \"ST\")\n  filtered_var_list &lt;- get_variable_list(subset=all_var_list)\n\n  for (var in all_var_list) {\n    # print(paste(var, ifelse(is_numeric_variable(var, filtered_var_list), \"numeric\", \"categorical\")), sep=\" \")\n\n    if (is_numeric_variable(var, filtered_var_list)) {\n      if (!var %in% numeric_var_list) {\n        return (FALSE)\n      }\n    } else {\n      if (!var %in% categorical_var_list) {\n        return (FALSE)\n      }\n    }\n  }\n  return (TRUE)\n}\n\ntest_4_cv &lt;- function () {\n  # test get valid variable values\n  variable_list &lt;- get_variable_list(subset=c(\"SEX\", \"PWGTP\", \"GRPIP\"))\n  cat_only &lt;- get_valid_variable_values(\"SEX\", variable_list)\n  num_only &lt;- get_valid_variable_values(\"PWGTP\", variable_list)\n  both &lt;- get_valid_variable_values(\"GRPIP\", variable_list)\n  return (list(cat_only_SEX=cat_only, num_only_PWGTP=num_only, both_GRPIP=both))\n}\n\ntest_5_cv &lt;- function () {\n  # test is valid variable value\n  variable_list &lt;- get_variable_list(subset=c(\"GRPIP\", \"AGEP\", \"SEX\"))\n  print(\"GRPIP\")\n  print(get_valid_variable_values(\"GRPIP\", variable_list))\n  # valid GRPIP\n  for (val in c(\"0\", \"101\", \"1\", \"100\", \"45\")) {\n    if (!is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n      return (FALSE)\n    }\n  }\n  # invalid GRPIP\n  for (val in c(\"102\", \"00\")) {\n    if (is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n      return (FALSE)\n    }\n  }\n\n  print(\"AGEP\")\n  print(get_valid_variable_values(\"AGEP\", variable_list))\n  # valid AGEP\n  for (val in c(\"00\", \"1\", \"99\", \"45\")) {\n    if (!is_valid_variable_value(val, \"AGEP\", variable_list)) {\n      print(val)\n      return (FALSE)\n    }\n  }\n  # invalid AGEP\n  for (val in c(\"100\", \"0\")) {\n    if (is_valid_variable_value(val, \"AGEP\", variable_list)) {\n      return (FALSE)\n    }\n  }\n\n  print(\"SEX\")\n  print(get_valid_variable_values(\"SEX\", variable_list))\n  # valid SEX\n  for (val in c(\"1\", \"2\")) {\n    if (!is_valid_variable_value(val, \"SEX\", variable_list)) {\n      return (FALSE)\n    }\n  }\n  # invalid SEX\n  for (val in c(\"0\", \"3\")) {\n    if (is_valid_variable_value(val, \"SEX\", variable_list)) {\n      return (FALSE)\n    }\n  }\n\n  return (TRUE)\n}\n\n# test_1_cv\n# str(tail(test_1_cv(), 3), max.level=4, list.len=6)\n# test_2_cv\n# str(test_2_cv(), max.level = 4, list.len = 6)\n# test_3_cv\n# test_3_cv()\n# test_4_cv\n# test_4_cv()\n# test_5_cv\n# test_5_cv()\n\n\nstr(tail(test_1_cv(), 3), max.level=4, list.len=6)\n\nList of 3\n $ TEL :List of 6\n  ..$ label           : chr \"Telephone service\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1: chr \"Yes\"\n  .. .. ..$ 0: chr \"N/A (GQ/vacant)\"\n  .. .. ..$ 2: chr \"No\"\n $ TEN :List of 6\n  ..$ label           : chr \"Tenure\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 5\n  .. .. ..$ 1: chr \"Owned with mortgage or loan (include home equity loans)\"\n  .. .. ..$ 0: chr \"N/A  (GQ/vacant)\"\n  .. .. ..$ 4: chr \"Occupied without payment of rent\"\n  .. .. ..$ 3: chr \"Rented\"\n  .. .. ..$ 2: chr \"Owned Free And Clear\"\n $ MLPJ:List of 6\n  ..$ label           : chr \"Served World War II (December 1941 - December 1946)\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"PWGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1 : chr \"Served This Period\"\n  .. .. ..$ 0 : chr \"Did not serve this period\"\n  .. .. ..$ -1: chr \"N/A (Less than 17 years old/no active duty)\"\n\nstr(test_2_cv(), max.level = 4, list.len = 6)\n\nList of 1\n $ PWGTP:List of 6\n  ..$ label        : chr \"PUMS person weight\"\n  ..$ predicateType: chr \"int\"\n  ..$ group        : chr \"N/A\"\n  ..$ limit        : int 0\n  ..$ is-weight    : logi TRUE\n  ..$ values       :List of 1\n  .. ..$ range:'data.frame':    1 obs. of  3 variables:\n  .. .. ..$ min        : chr \"1\"\n  .. .. ..$ max        : chr \"9999\"\n  .. .. ..$ description: chr \"Continuous values of PWGTP\"\n\ntest_3_cv()\n\n[1] TRUE\n\ntest_4_cv()\n\n$cat_only_SEX\n[1] \"1\" \"2\"\n\n$num_only_PWGTP\n min  max \n   1 9999 \n\n$both_GRPIP\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n\ntest_5_cv()\n\n[1] \"GRPIP\"\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n[1] \"AGEP\"\n      min  max \n\"00\"  \"1\" \"99\" \n[1] \"SEX\"\n[1] \"1\" \"2\"\n\n\n[1] TRUE\n\n\n\n\n\n\nis_valid_variable_input &lt;- function(given_list, valid_list, sep=\"=\", with_delim=FALSE) {\n  # Checks if the given list of variables is valid, meaning each item in the list is found in the valid list\n  # left_most side of the variable is exactly within the valid list\n\n  # take the string element and split it based on the delimiter - taking the first item\n  # if with_delim is true, then take the portion up to and including the delimiter\n  strip_value &lt;- function(element) {\n    if (with_delim) {\n      return(substr(element, 1, regexpr(sep, element)))\n    }\n    return(strsplit(element, sep)[[1]][1])\n  }\n\n  # does it match any of the items in the valid list\n  # all the items must match an item in the valid list\n  # ^ ensures it's the start of the string and $ ensures it's the end of the string, so must be hard match to the valid list\n  if (!all(sapply(given_list, function(x) any(grepl(paste0(\"^\", strip_value(x), \"$\"), valid_list))))) {\n    return (FALSE)\n  }\n  return (TRUE)\n}\n\n\nsource(\"src/input_validation.R\")\n\ntest_1_iv &lt;- function() {\n  # test valid default = delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  valid_given_lists &lt;- list(\n    \"AGEP\",\n    c(\"AGEP\", \"PWGTP\", \"SEX\"),\n    c(\"AGEP=abc\", \"PWGTP=123\", \"SEX=\")\n  )\n\n  for (valid_given_list in valid_given_lists) {\n    if (!is_valid_variable_input(valid_given_list, valid_list)) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_2_iv &lt;- function() {\n  # test valid alternate : delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  valid_given_lists &lt;- list(\n    \"AGEP\",\n    c(\"AGEP\", \"PWGTP\", \"SEX\"),\n    c(\"AGEP:abc\", \"PWGTP:123\", \"SEX:\")\n  )\n\n  for (valid_given_list in valid_given_lists) {\n    if (!is_valid_variable_input(valid_given_list, valid_list, sep=\":\")) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_3_iv &lt;- function() {\n  # test valid alternate : delim and including the delim in the match\n  valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n\n  valid_given_lists &lt;- list(\n    \"state:\",\n    c(\"state:\", \"division:5\"),\n    c(\"state:\", \"division:\", \"region:\"),\n    c(\"state:abc\", \"division:123\", \"region:\")\n  )\n\n  for (valid_given_list in valid_given_lists) {\n    if (!is_valid_variable_input(valid_given_list, valid_list, sep=\":\", with_delim = TRUE)) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_4_iv &lt;- function() {\n  # test invalid default = delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  invalid_given_lists &lt;- list(\n    \"AGE\",\n    \"AGEPa\",\n    c(\"AGEP\", \"PWGTP\", \"SAX=1\"),\n    c(\"AGEP\", \"PWGTP:1\")\n  )\n\n  for (invalid_given_list in invalid_given_lists) {\n    if (is_valid_variable_input(invalid_given_list, valid_list)) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_5_iv &lt;- function() {\n  # test invalid alternate : delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  invalid_given_lists &lt;- list(\n    \"AGE\",\n    \"AGEPa\",\n    c(\"AGEP\", \"PWGTP\", \"SAX:1\"),\n    c(\"AGEP\", \"PWGTP=1\")\n  )\n\n  for (invalid_given_list in invalid_given_lists) {\n    if (is_valid_variable_input(invalid_given_list, valid_list, sep=\":\")) {\n    return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_6_iv &lt;- function() {\n  # test invalid alternate : delim and including the delim in the match\n  valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n\n  invalid_given_lists &lt;- list(\n    \"state\",\n    c(\"state:\", \"division=5\"),\n    c(\"state:\", \"division:\", \"region\"),\n    c(\"state:abc\", \"division:123\", \"ST:1\")\n  )\n\n  for (invalid_given_list in invalid_given_lists) {\n    if (is_valid_variable_input(invalid_given_list, valid_list, sep=\":\", with_delim = TRUE)) {\n      return(FALSE)\n    }\n  }\n\n  return (TRUE)\n}\n\n# test_1_iv()\n# test_2_iv()\n# test_3_iv()\n# test_4_iv()\n# test_5_iv()\n# test_6_iv()\n\n\ntest_1_iv()\n\n[1] TRUE\n\ntest_2_iv()\n\n[1] TRUE\n\ntest_3_iv()\n\n[1] TRUE\n\ntest_4_iv()\n\n[1] TRUE\n\ntest_5_iv()\n\n[1] TRUE\n\ntest_6_iv()\n\n[1] TRUE\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\nfix_time_interval_categories &lt;- function(item, value_list) {\n  # takes time intervals of the format \"1:00 a.m. to 1:04 a.m.\"\n  # converts to midpoint \"1:02:00\"\n  sorted_item &lt;- item[sort(names(item))]\n  item_values &lt;- pivot_longer(as.data.frame(sorted_item), cols=everything(), names_to=NULL, values_to=\"time_intervals\")\n  item_df &lt;- pivot_longer(as.data.frame(item_values), cols=everything(), names_to=NULL, values_to=\"time_intervals\")\n  item_df_transformed &lt;- item_df[-1,] |&gt;\n    separate_wider_delim(cols=\"time_intervals\", delim=\" to \", names=c(\"left\", \"right\")) |&gt;\n    mutate(left = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", left)),\n           right = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", right))) |&gt;\n    mutate(left = parse_date_time(left, orders = \"I:M p\", tz = \"UTC\"),\n           right = parse_date_time(right, orders = \"I:M p\", tz = \"UTC\")) |&gt;\n    mutate(midpoint = format(left + (right - left)/2, \"%H:%M:%S\")) |&gt;\n    select(\"midpoint\")\n\n  value_map &lt;- NULL\n  for (value in value_list) {\n    if (value == \"0\") {\n      value_map &lt;- c(value_map, \"NA\")\n      next\n    }\n    value_map &lt;- c(value_map, item_df_transformed$midpoint[as.numeric(value)])\n  }\n  return(value_list=value_map)\n}\n\nconvert_columns_to_numeric &lt;- function(tibble, numeric_item_list, exclude_list=NULL) {\n  tibble &lt;- tibble |&gt;\n    mutate(across(all_of(numeric_item_list[!numeric_item_list %in% exclude_list]), as.integer))\n\n  return (tibble)\n}\n\nremove_categorical_row_items_in_numeric &lt;- function(tibble, variable_info) {\n  # takes a tibble and removes rows where the numeric column is not in the range given for the variable\n  numeric_columns &lt;- tibble |&gt; select(where(is.numeric))\n\n  for (col in names(numeric_columns)) {\n    # Get the min and max range for the current column from variable_info\n    min_val &lt;- as.integer(variable_info[[col]]$values$range$min)\n    max_val &lt;- as.integer(variable_info[[col]]$values$range$max)\n\n    # Filter the tibble rows based on the min and max values for this column\n    tibble &lt;- tibble |&gt;\n      filter(!!sym(col) &gt;= min_val & !!sym(col) &lt;= max_val)\n\n    return (tibble)\n  }\n}\n\nconvert_categorical_to_factor &lt;- function(tibble, variable_info) {\n  # takes the character columns in the tibble and converts them to the factors in the variable list given\n  # does some specific treatment of JWAP, JWDP, state, region, division - particular to census data\n  character_columns &lt;- tibble |&gt; select(where(is.character))\n  for (col in names(character_columns)) {\n    if (col %in% c(\"JWAP\", \"JWDP\") | (!col %in% names(variable_info) & !col %in% c(\"state\", \"region\", \"division\"))) {\n      next\n    }\n    col_var &lt;- col\n    col_var &lt;- ifelse(col == \"state\", \"ST\", col_var)\n    col_var &lt;- ifelse(col == \"region\", \"REGION\", col_var)\n    col_var &lt;- ifelse(col == \"division\", \"DIVISION\", col_var)\n\n    # Get the item values for the current column from variable_info\n    item_values &lt;- variable_info[[col_var]]$values$item\n    # sort the items based on names in reverse order to use labels later\n    item_values &lt;- item_values[order(names(item_values))]\n    # some have 01, 02, etc. but are placed in the lists as 1, 2, etc.\n    names(item_values) &lt;- as.character(as.integer(names(item_values)))\n    # Convert the column to a factor based on the item values\n    tibble &lt;- tibble |&gt;\n      mutate(!!sym(col) := factor(!!sym(col), levels=names(item_values), labels=item_values))\n  }\n  return (tibble)\n}\n\n\nsource(\"src/census_query.R\")\nsource(\"src/census_variables.R\")\nsource(\"src/post_processing.R\")\n\n\ntest_1_pp &lt;- function() {\n  # test the time value conversions for the 2 columns JWAP and JWDP\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=c(\"JWAP\", \"JWDP\"), for_val=\"state:10\"))\n  # lot of duplicate rows - get the unique ones\n  data &lt;- data |&gt; distinct(.keep_all = TRUE)\n  var_filtered &lt;- get_variable_list(\"2022\", c(\"JWAP\", \"JWDP\"))\n  data$JWAP_fixed &lt;- fix_time_interval_categories(var_filtered$JWAP$values$item, data$JWAP)\n  data$JWDP_fixed &lt;- fix_time_interval_categories(var_filtered$JWDP$values$item, data$JWDP)\n\n  # order the var_filtered items columns for better viewing purposes\n  var_filtered$JWAP &lt;- var_filtered$JWAP$values$item[order(names(var_filtered$JWAP$values$item))]\n  var_filtered$JWDP &lt;- var_filtered$JWDP$values$item[order(names(var_filtered$JWDP$values$item))]\n\n  return (list(data=data, var_info=var_filtered))\n}\n\ntest_2_pp &lt;- function() {\n  # test converting columns to numeric, given a list of numeric columns and a list of columns to exclude\n  # str of data will have int where a character was\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=c(\"AGEP\", \"SEX\", \"JWAP\"), for_val=\"state:10\"))\n  data &lt;- convert_columns_to_numeric(data, c(\"AGEP\", \"JWAP\"), \"JWAP\")\n  return (data)\n}\n\ntest_3_pp &lt;- function() {\n  # test the removal of categorical items in numeric columns (removes the 0)\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=\"AGEP\", for_val=\"state:10\"))\n  var_filtered &lt;- get_variable_list(\"2022\", \"AGEP\")\n  data &lt;- data |&gt;\n    distinct(.keep_all = TRUE) |&gt;\n    convert_columns_to_numeric(\"AGEP\") |&gt;\n    remove_categorical_row_items_in_numeric(var_filtered)\n  return (list(data=data, var_info=var_filtered))\n}\n\ntest_4_pp &lt;- function() {\n  # test the replacement of the categorical items with the factor labels\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=c(\"AGEP\", \"SEX\", \"HISPEED\"), for_val=\"state:10\"))\n  var_filtered &lt;- get_variable_list(\"2022\", c(\"AGEP\", \"SEX\", \"HISPEED\", \"ST\"))\n  data$SEX_saved &lt;- data$SEX\n  data$HISPEED_saved &lt;- data$HISPEED\n  data$ST_saved &lt;- data$state\n  data &lt;- data |&gt;\n    distinct(.keep_all = TRUE) |&gt;\n    convert_columns_to_numeric(\"AGEP\") |&gt;\n    remove_categorical_row_items_in_numeric(var_filtered) |&gt;\n    convert_categorical_to_factor(var_filtered)\n\n  var_filtered$AGEP &lt;- var_filtered$AGEP$values\n  var_filtered$SEX &lt;- var_filtered$SEX$values$item[order(names(var_filtered$SEX$values$item))]\n  var_filtered$HISPEED &lt;- var_filtered$HISPEED$values$item[order(names(var_filtered$HISPEED$values$item))]\n  var_filtered$ST &lt;- var_filtered$ST$values$item[order(names(var_filtered$ST$values$item))]\n\n  return(list(data=data, var_info=var_filtered))\n}\n\n# data_1_pp &lt;- test_1_pp()\n# str(data_1_pp$data)\n# str(data_1_pp$var_info, max.level=2, list.len=5)\n# data_2_pp &lt;- test_2_pp()\n# str(data_2_pp, max.level=2)\n# data_3_pp &lt;- test_3_pp()\n# # doesnt have 0 in the int list anymore\n# head(table(data_3_pp$data$AGEP), 5)\n#\n# data_4_pp &lt;- test_4_pp()\n# str(data_4_pp$data)\n# str(data_4_pp$var_info, max.level=3, list.len=5)\n\n\ndata_1_pp &lt;- test_1_pp()\nstr(data_1_pp$data)\n\ntibble [771 × 5] (S3: tbl_df/tbl/data.frame)\n $ JWAP      : chr [1:771] \"0\" \"91\" \"106\" \"260\" ...\n $ JWDP      : chr [1:771] \"0\" \"49\" \"55\" \"140\" ...\n $ state     : chr [1:771] \"10\" \"10\" \"10\" \"10\" ...\n $ JWAP_fixed: chr [1:771] \"NA\" \"07:47:00\" \"09:02:00\" \"21:52:00\" ...\n $ JWDP_fixed: chr [1:771] \"NA\" \"07:32:00\" \"08:02:00\" \"21:34:30\" ...\n\nstr(data_1_pp$var_info, max.level=2, list.len=5)\n\nList of 2\n $ JWAP:List of 286\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:04 a.m.\"\n  ..$ 002: chr \"12:05 a.m. to 12:09 a.m.\"\n  ..$ 003: chr \"12:10 a.m. to 12:14 a.m.\"\n  ..$ 004: chr \"12:15 a.m. to 12:19 a.m.\"\n  .. [list output truncated]\n $ JWDP:List of 151\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:29 a.m.\"\n  ..$ 002: chr \"12:30 a.m. to 12:59 a.m.\"\n  ..$ 003: chr \"1:00 a.m. to 1:29 a.m.\"\n  ..$ 004: chr \"1:30 a.m. to 1:59 a.m.\"\n  .. [list output truncated]\n\ndata_2_pp &lt;- test_2_pp()\nstr(data_2_pp, max.level=2)\n\ntibble [9,641 × 4] (S3: tbl_df/tbl/data.frame)\n $ AGEP : int [1:9641] 84 39 19 77 18 32 50 23 20 18 ...\n $ SEX  : chr [1:9641] \"2\" \"2\" \"2\" \"2\" ...\n $ JWAP : chr [1:9641] \"0\" \"0\" \"0\" \"0\" ...\n $ state: chr [1:9641] \"10\" \"10\" \"10\" \"10\" ...\n\ndata_3_pp &lt;- test_3_pp()\n# doesnt have 0 in the int list anymore\nhead(table(data_3_pp$data$AGEP), 5)\n\n\n1 2 3 4 5 \n1 1 1 1 1 \n\ndata_4_pp &lt;- test_4_pp()\nstr(data_4_pp$data)\n\ntibble [513 × 7] (S3: tbl_df/tbl/data.frame)\n $ AGEP         : int [1:513] 69 68 57 61 50 62 58 61 42 19 ...\n $ SEX          : Factor w/ 2 levels \"Male\",\"Female\": 1 2 2 1 2 1 1 2 1 2 ...\n $ HISPEED      : Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 2 2 2 2 2 2 3 3 3 3 ...\n $ state        : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n $ SEX_saved    : chr [1:513] \"1\" \"2\" \"2\" \"1\" ...\n $ HISPEED_saved: chr [1:513] \"1\" \"1\" \"1\" \"1\" ...\n $ ST_saved     : chr [1:513] \"10\" \"10\" \"10\" \"10\" ...\n\nstr(data_4_pp$var_info, max.level=3, list.len=5)\n\nList of 4\n $ AGEP   :List of 2\n  ..$ item :List of 1\n  .. ..$ 00: chr \"Under 1 year\"\n  ..$ range:'data.frame':   1 obs. of  3 variables:\n  .. ..$ min        : chr \"1\"\n  .. ..$ max        : chr \"99\"\n  .. ..$ description: chr \"1 to 99 years (Top-coded***)\"\n $ SEX    :List of 2\n  ..$ 1: chr \"Male\"\n  ..$ 2: chr \"Female\"\n $ HISPEED:List of 3\n  ..$ 0: chr \"N/A (GQ/vacant/no paid access to the internet)\"\n  ..$ 1: chr \"Yes\"\n  ..$ 2: chr \"No\"\n $ ST     :List of 52\n  ..$ 01: chr \"Alabama/AL\"\n  ..$ 02: chr \"Alaska/AK\"\n  ..$ 04: chr \"Arizona/AZ\"\n  ..$ 05: chr \"Arkansas/AR\"\n  ..$ 06: chr \"California/CA\"\n  .. [list output truncated]\n\n\n\n\n\n\nsource(\"src/census_query.R\")\nsource(\"src/census_variables.R\")\nsource(\"src/input_validation.R\")\nsource(\"src/post_processing.R\")\n\nget_data &lt;- function(year=\"2022\", variables=c(\"AGEP\", \"PWGTP\", \"SEX\"), geography_level=\"state:10\") {\n  # check if PWGTP is provided in the variable list. May be PWGTP=30 or PWGTP=30,50\n  if (!any(grepl(\"^PWGTP$\", variables))) {\n    variables &lt;- c(variables, \"PWGTP\")\n  }\n\n  # ensure year is between 2010 and 2022 (inclusive)\n  year_options &lt;- 2010:2022\n  if (!year %in% year_options) {\n    stop(glue(\"Invalid year {year}, should be one of [{glue_collapse(year_options, sep=', ')}]\"))\n  }\n\n  # ensure variables is in the desired set given\n  variable_options &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n  if (!is_valid_variable_input(variables, variable_options)) {\n    stop(glue(\"Invalid variable in [{glue_collapse(variables, sep=', ')}], valid options [{glue_collapse(variable_options, sep=', ')}]\"))\n  }\n\n  geography_options &lt;- c(\"state:\", \"region:\", \"division:\")\n\n  if (geography_level != \"\" & !is_valid_variable_input(geography_level, geography_options, sep=\":\", with_delim=TRUE)) {\n    stop(glue(\"Invalid geography level {geography_level}, should be 'all' or one of [{glue_collapse(geography_options, sep=', ')}]\"))\n  }\n\n  filtered_var_info &lt;- get_variable_list(year, c(variable_options, \"ST\", \"REGION\", \"DIVISION\"))\n  # some years dont have data\n  # remove variables where they don't exist\n  for (var in names(filtered_var_info)) {\n    if (is.null(filtered_var_info[[var]]) | is.null(filtered_var_info[[var]]$values)) {\n      print(paste0(\"removing \", var, \" from year \", year))\n      filtered_var_info &lt;- filtered_var_info[!names(filtered_var_info) %in% var]\n      for (var2 in variables) {\n        if (any(grepl(var, var2))) {\n          print(paste0(\"removing variable \", var2, \" from year \", year))\n          variables &lt;- variables[variables != var2]\n        }\n      }\n    }\n  }\n  # use the most updated variable list for geography level - not in prior years but still can filter\n  # for those years, use prior variables for rest though, in case mapping changed for some reason\n  needed_items &lt;- list()\n  needed_items &lt;- ifelse(is.null(filtered_var_info$ST), c(needed_items, \"ST\"), needed_items)\n  needed_items &lt;- ifelse(is.null(filtered_var_info$REGION), c(needed_items, \"REGION\"), needed_items)\n  needed_items &lt;- ifelse(is.null(filtered_var_info$DIVISION), c(needed_items, \"DIVISION\"), needed_items)\n\n  if (!is.null(needed_items)) {\n    newest_geography_variables &lt;- get_variable_list(2022, needed_items)\n    filtered_var_info &lt;- c(filtered_var_info, newest_geography_variables)\n  }\n\n  # PWGTP always included\n  # AGEP as default, at least 1 numeric variable needs to be returned aside from PWGTP\n  # do for loop that checks if range is in the var_data values (AGEP,PWGTP,etc.) ex) var_data$AGEP$values$range\n\n  # SEX is default categorical variable\n  # at least one categorical variable needs to be returned\n\n  numeric_items_count &lt;- 0\n  categorical_items_count &lt;- 0\n  numeric_item_list &lt;- NULL\n\n  # check and filter the passed in variables\n  for (var in variables) {\n    var_split &lt;- strsplit(var, \"=\")[[1]]\n    var &lt;- var_split[1]\n    values &lt;- var_split[2]\n    # print(paste(var, values, sep=\" \"))\n\n    if (is_numeric_variable(var, filtered_var_info)) {\n      numeric_item_list &lt;- c(numeric_item_list, var)\n      numeric_items_count &lt;- numeric_items_count + 1\n    } else {\n      categorical_items_count &lt;- categorical_items_count + 1\n    }\n    # print(get_valid_variable_values(var, filtered_var_info))\n  }\n\n  if (numeric_items_count &lt;= 1) {\n    variables &lt;- c(variables, \"AGEP\")\n    numeric_item_list &lt;- c(numeric_item_list, \"AGEP\")\n    # print(\"AGEP NA\")\n    # print(get_valid_variable_values(\"AGEP\", filtered_var_info))\n  }\n\n  if (categorical_items_count == 0) {\n    variables &lt;- c(variables, \"SEX\")\n    # print(\"SEX NA\")\n    # print(get_valid_variable_values(\"SEX\", filtered_var_info))\n  }\n\n  var_with_filter &lt;- NULL\n  for (var in variables) {\n    if (regexpr(\"=\", var) != -1) {\n      var_with_filter &lt;- c(var_with_filter, var)\n      variables &lt;- variables[variables != var]\n    }\n  }\n\n  URL &lt;- census_url(year=year, get_vals=variables, get_vals_subset=var_with_filter, for_val=geography_level)\n  parsed_tibble &lt;- census_tibble(URL)\n\n  if (\"JWAP\" %in% names(parsed_tibble)) {\n    parsed_tibble$JWAP &lt;- fix_time_interval_categories(filtered_var_info$JWAP$values$item, parsed_tibble$JWAP)\n  }\n  if (\"JWDP\" %in% names(parsed_tibble)) {\n    parsed_tibble$JWDP &lt;- fix_time_interval_categories(filtered_var_info$JWDP$values$item, parsed_tibble$JWDP)\n  }\n  # print(glue(\"Numeric item list, gets converted to int - [{glue_collapse(numeric_item_list, sep=', ')}]\"))\n  # print(glue(\"List without JWAP and JWDP - [{glue_collapse(numeric_item_list[!numeric_item_list %in% c('JWDP', 'JWAP')], sep=', ')}]\"))\n\n  parsed_tibble &lt;- parsed_tibble |&gt;\n    convert_columns_to_numeric(numeric_item_list, exclude_list=c(\"JWDP\", \"JWAP\")) |&gt;\n    remove_categorical_row_items_in_numeric(filtered_var_info) |&gt;\n    convert_categorical_to_factor(filtered_var_info)\n\n  # TODO time is not split into a numeric value yet\n\n  # add census class to the parsed tibble\n  class(parsed_tibble) &lt;- c(\"census\", class(parsed_tibble))\n  return(list(parsed=parsed_tibble, var_info=filtered_var_info, URL=URL))\n}\n\nget_data_years &lt;- function(years=\"2022\", variables=c(\"AGEP\", \"PWGTP\", \"SEX\"), geography_level=\"state:10\") {\n  # get multiple years of data, removing 2020 if given - year is not valid for some reason\n  years &lt;- years[years != 2020]\n  results &lt;- lapply(years, function(year) get_data(year=year, variables=variables, geography_level=geography_level))\n  names(results) &lt;- years\n  return(results)\n}\n\n\nsource(\"src/main.R\")\n\ntest_1_m &lt;- function() {\n  # test get a year\n  year &lt;- \"2022\"\n  variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n  geography_level &lt;- \"state:10\"\n  return_data &lt;- get_data(\n    year=year,\n    variables=variable_list,\n    geography_level = geography_level\n  )\n  return (return_data)\n}\n\ntest_2_m &lt;- function() {\n  # test get all years in range\n  years &lt;- 2010:2022\n  variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n  geography_level &lt;- \"state:10\"\n  return_data &lt;- get_data_years(\n    years=years,\n    variables=variable_list,\n    geography_level = geography_level\n  )\n  return (return_data)\n}\n\ndata_1_m &lt;- test_1_m()\ndata_1_m$URL\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\n\nstr(data_1_m$parsed)\n\ncensus [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n\ndata_2_m &lt;- test_2_m()\n\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\n\nstr(data_2_m, max.level = 2)\n\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : census [8,494 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : census [8,906 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : census [8,733 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : census [8,682 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : census [8,923 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : census [8,926 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : census [8,801 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : census [8,868 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : census [9,043 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : census [9,197 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : census [9,361 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : census [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n\n\n\ndata_1_m &lt;- test_1_m()\ndata_1_m$URL\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\n\nstr(data_1_m$parsed)\n\ncensus [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n\ndata_2_m &lt;- test_2_m()\n\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\n\nstr(data_2_m, max.level = 2)\n\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : census [8,494 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : census [8,906 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : census [8,733 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : census [8,682 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : census [8,923 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : census [8,926 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : census [8,801 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : census [8,868 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : census [9,043 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : census [9,197 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : census [9,361 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : census [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(quantreg)\n\nLoading required package: SparseM\n\nsummary_census &lt;- function(\n  x,\n  categorical=c(\"SEX\",\"FER\",\"HHL\",\"SCH\",\"SCHL\", \"HISPEED\", \"PWGTP\",\"REGION\",\"DIVISION\",\"STATE\"),\n  numerical=c(\"GASP\", \"GRPIP\",\"AGEP\", \"JWMNP\", \"PWGTP\") # TODO JWAP and JWDP\n) {\n  # Finding mean/sd/counts for numerical and categorical data\n\n  if (!(\"census\" %in% class(x))) {\n    stop(\"Input must be a census object\")\n  }\n\n  # from the inputs, split into categorical and numerical data\n  new_data_cat &lt;- x[names(x) %in% categorical]\n  new_data_num &lt;- x[names(x) %in% numerical]\n\n  cat_counts_result &lt;- NULL\n  num_mean_sd_result &lt;- NULL\n  \n  for (col in names(new_data_cat)) {\n    if (col == \"PWGTP\") {\n      next\n    }\n    \n    cat_counts_result[[col]] &lt;- new_data_cat |&gt;\n      group_by(!!sym(col)) |&gt;\n      summarize(count=sum(PWGTP))\n  }\n\n  for (col in names(new_data_num)) {\n    if (col == \"PWGTP\") {\n      next\n    }\n    num_mean_sd_result[[col]] &lt;- new_data_num |&gt;\n      mutate(new_mult = !!sym(col) * PWGTP) |&gt;\n      summarize(mean=sum(new_mult) / sum(PWGTP),\n                sd=sqrt(sum(PWGTP * (!!sym(col) - mean)^2) / sum(PWGTP)))\n  }\n\n  return (list(cat_results=cat_counts_result, num_results=num_mean_sd_result))\n}\n\n# # We chose to investigate the populations educational level base on age. We were interested in showing people who are typical school age range.\n# parsed2&lt;- parsed %&gt;%\n#   filter(AGEP&lt;=40 & AGEP &gt;=5)%&gt;%\n#   ggplot(aes(x =SCH, y =AGEP, weight= PWGTP,fill = SCH, color = SCH))+\n#   geom_boxplot()\n# print(parsed2)\n\nplot_census &lt;- function(x, categorical=\"SCH\", numerical=\"AGEP\") {\n  if (!(\"census\" %in% class(x))) {\n    stop(\"Input must be a census object\")\n  }\n\n  if (length(categorical) != 1 | length(numerical) != 1) {\n    stop(\"Only one categorical and one numerical variable can be plotted\")\n  }\n\n  x |&gt;\n    ggplot(aes(x=!!sym(categorical), y=!!sym(numerical), weight=PWGTP)) +\n      geom_boxplot()\n}\n\n\nsource(\"src/summarizing.R\")\nsource(\"src/main.R\")\nsource(\"test/test_main.R\")\n\ncensus [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : census [8,494 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : census [8,906 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : census [8,733 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : census [8,682 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : census [8,923 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : census [8,926 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : census [8,801 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : census [8,868 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : census [9,043 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : census [9,197 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : census [9,361 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : census [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n\ntest_1_s &lt;- function() {\n  parsed &lt;- test_1_m()$parsed\n  return (summary_census(parsed))\n}\n\ntest_2_s &lt;- function() {\n  parsed &lt;- test_1_m()$parsed\n  plot_census(parsed)\n}\n\n# data_1_s &lt;- test_1_s()\n# str(data_1_s, max.level = 2)\n# data_1_s_summary &lt;- summary_census(data_1_s)\n# plot_census(data_1_s)\n\n\n# parsed &lt;- return_data$parsed\n#\n# summary_census(parsed)\n#\n# #Plot of information\n#\n# # library(ggplot2)\n# # library(quantreg)\n# # library(reshape2)\n# # We chose to investigate the populations educational level base on age. We were interested in showing people who are typical school age range.\n# parsed2&lt;- parsed %&gt;%\n#   filter(AGEP&lt;=40 & AGEP &gt;=5)%&gt;%\n#   ggplot(aes(x =SCH, y =AGEP, weight= PWGTP,fill = SCH, color = SCH))+\n#   geom_boxplot()\n# print(parsed2)\n\n\ntest_1_s()\n\n$cat_results\n$cat_results$SEX\n# A tibble: 2 × 2\n  SEX     count\n  &lt;fct&gt;   &lt;int&gt;\n1 Male   488442\n2 Female 520323\n\n$cat_results$FER\n# A tibble: 3 × 2\n  FER                                                   count\n  &lt;fct&gt;                                                 &lt;int&gt;\n1 N/A (less than 15 years/greater than 50 years/ male) 785329\n2 Yes                                                   10669\n3 No                                                   212767\n\n$cat_results$HHL\n# A tibble: 6 × 2\n  HHL                                 count\n  &lt;fct&gt;                               &lt;int&gt;\n1 N/A (GQ/vacant)                     22688\n2 English Only                       796054\n3 Spanish                             95801\n4 Other Indo-European languages       41022\n5 Asian and Pacific Island languages  29736\n6 Other Language                      23464\n\n$cat_results$HISPEED\n# A tibble: 3 × 2\n  HISPEED                                         count\n  &lt;fct&gt;                                           &lt;int&gt;\n1 N/A (GQ/vacant/no paid access to the internet)  74950\n2 Yes                                            830510\n3 No                                             103305\n\n$cat_results$SCH\n# A tibble: 4 × 2\n  SCH                                            count\n  &lt;fct&gt;                                          &lt;int&gt;\n1 N/A (less than 3 years old)                    20751\n2 No, has not attended in the last 3 months     755797\n3 Yes, public school or public college          195091\n4 Yes, private school or college or home school  37126\n\n$cat_results$SCHL\n# A tibble: 25 × 2\n   SCHL                        count\n   &lt;fct&gt;                       &lt;int&gt;\n 1 N/A (less than 3 years old) 20751\n 2 No schooling completed      29639\n 3 Nursery school, preschool   16425\n 4 Kindergarten                13248\n 5 Grade 1                     10178\n 6 Grade 2                     10938\n 7 Grade 3                     12126\n 8 Grade 4                     12208\n 9 Grade 5                     11754\n10 Grade 6                     14467\n# ℹ 15 more rows\n\n\n$num_results\n$num_results$AGEP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  42.0  23.6\n\n$num_results$GASP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  64.1  135.\n\n$num_results$GRPIP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  7.84  19.1\n\n$num_results$JWMNP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  10.8  19.4\n\ntest_2_s()"
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "Project1",
    "section": "",
    "text": "library(glue)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncensus_url &lt;- function(year=\"2022\", get_vals=c(\"AGEP\", \"PWGTP\", \"SEX\"), get_vals_subset=NULL, for_val=\"state:10\") {\n  # Builds the URL, assumes all values are valid and/or validation is done outside of this function\n  # Some defaults are provided, just to ensure a large API call URL isn't constructed on accident\n\n  BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n  get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse=\",\")) != \"\", glue(\"get={vals}\"), \"\")\n  get_vals_subset_str &lt;- paste(get_vals_subset, collapse=\"&\")\n  for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n  suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n  suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse=\"&\")\n  return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\ncensus_tibble &lt;- function(URL) {\n  # Given a census_url, this function will return a tibble of the data\n  id_info &lt;- httr::GET(URL)\n\n  ## Creating a tibble to view API information\n  parsed &lt;- fromJSON(rawToChar(id_info$content))\n\n  parsed_tibble &lt;- as_tibble(parsed[-1,])\n  colnames(parsed_tibble) &lt;- parsed[1,]\n\n  return (parsed_tibble)\n}\n\n\nsource(\"src/census_query.R\")\n\ntest_1_cq &lt;- function() {\n  # test default\n  URL &lt;- census_url()\n  \n  return (URL)\n}\n\ntest_2_cq &lt;- function() {\n  # test omissions of variables\n  URL &lt;- census_url(get_vals=NULL, get_vals_subset=NULL, for_val=NULL)\n  \n  return (URL)\n}\n\ntest_3_cq &lt;- function() {\n  # test providing values use, no validations\n  URL &lt;- census_url(\n    year=2021,\n    get_vals = c(\"HISPEED\", \"PWGTP\"),\n    get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:32\"),\n    for_val = \"region:1\"\n  )\n  return (URL)\n}\n\ntest_4_cq &lt;- function() {\n  # test using URL to get the same data in a tibble\n  URL &lt;- test_3_cq()\n  return (census_tibble(URL))\n}\n\n# data_1_cq &lt;- test_1_cq()\n# data_2_cq &lt;- test_2_cq()\n# data_3_cq &lt;- test_3_cq()\n# data_4_cq &lt;- test_4_cq()\n\n\ntest_1_cq()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2_cq()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3_cq()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:32&for=region:1\n\ntest_4_cq()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n# A tibble: 33 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 1       213   0     2     30    1     \n 2 1       222   0     2     30    1     \n 3 1       196   0     2     30    1     \n 4 1       128   0     2     32    1     \n 5 1       63    0     2     32    1     \n 6 1       188   0     2     30    1     \n 7 1       301   0     2     30    1     \n 8 1       402   0     2     31    1     \n 9 2       157   0     2     32    1     \n10 0       239   0     2     32    1     \n# ℹ 23 more rows\n\n\n\n\n\n\nlibrary(\"glue\")\nlibrary(\"jsonlite\")\nlibrary(\"tidyverse\")\nlibrary(\"httr\")\n\nget_variable_list &lt;- function(year=\"2022\", subset=NULL) {\n  # Get the full variable list for the given year, with option to filter the list down to a subset\n  URL_VARIABLES &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums/variables.json\")\n  var_info &lt;- httr::GET(URL_VARIABLES)\n  var_info_parsed &lt;- fromJSON(rawToChar(var_info$content))\n  var_info_tibble &lt;- as_tibble(var_info_parsed)$variables\n\n  if (is.null(subset)) {\n    return(var_info_tibble)\n  }\n\n  var_data &lt;- list()\n  for (var in subset) {\n    var_data[var] &lt;- var_info_tibble[var]\n  }\n\n  return(var_data)\n}\n\nis_numeric_variable &lt;- function(var, var_info_tibble) {\n  # check if a value is numeric - meaning range is provided and or it is a specific named date variable\n  if (!is.null(var_info_tibble[[var]]$values$range) | var %in% c(\"JWAP\", \"JWDP\")) {\n    return (TRUE)\n  }\n  return (FALSE)\n}\n\nget_valid_variable_values &lt;- function(var, var_info_tibble) {\n  # get an output to see the valid variables that can be had (the items and the range)\n  # items are just placed into the list, the range pulls the named items of min and max\n  var_range &lt;- var_info_tibble[[var]]$values$range\n  var_item &lt;- var_info_tibble[[var]]$values$item\n\n  ret &lt;- NULL\n\n  if (!is.null(var_item)) {\n    ret &lt;- c(ret, names(var_item))\n  }\n\n  if (!is.null(var_range)) {\n    min &lt;- as.numeric(var_range$min)\n    max &lt;- as.numeric(var_range$max)\n    ret &lt;- c(ret, c(min=min,max=max))\n  }\n\n  return (ret)\n}\n\nis_valid_variable_value &lt;- function(val, var, var_info_tibble) {\n  # give a value for a variable, check if it is valid\n  valid_values &lt;- get_valid_variable_values(var, var_info_tibble)\n\n  if (val %in% valid_values) {\n    return (TRUE)\n  }\n\n  # if names contains min and max both, there was a range provided\n  if (\"min\" %in% names(valid_values) & \"max\" %in% names(valid_values)) {\n    min &lt;- as.numeric(valid_values[\"min\"])\n    max &lt;- as.numeric(valid_values[\"max\"])\n    num_val &lt;- as.numeric(val)\n    return (num_val &gt;= min & num_val &lt;= max)\n  }\n\n  return (FALSE)\n}\n\n\nsource(\"src/census_variables.R\")\n\ntest_1_cv &lt;- function () {\n  # test default get all\n  var_list &lt;- get_variable_list()\n  return (var_list)\n}\n\ntest_2_cv &lt;- function () {\n  # test get specific\n  var_list &lt;- get_variable_list(subset=\"PWGTP\")\n  return (var_list)\n}\n\ntest_3_cv &lt;- function () {\n  # test if a variable is numeric or not from all the desired variables\n  all_var_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"REGION\", \"DIVISION\", \"ST\")\n  numeric_var_list &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\")\n  categorical_var_list &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\", \"REGION\", \"DIVISION\", \"ST\")\n  filtered_var_list &lt;- get_variable_list(subset=all_var_list)\n\n  for (var in all_var_list) {\n    # print(paste(var, ifelse(is_numeric_variable(var, filtered_var_list), \"numeric\", \"categorical\")), sep=\" \")\n\n    if (is_numeric_variable(var, filtered_var_list)) {\n      if (!var %in% numeric_var_list) {\n        return (FALSE)\n      }\n    } else {\n      if (!var %in% categorical_var_list) {\n        return (FALSE)\n      }\n    }\n  }\n  return (TRUE)\n}\n\ntest_4_cv &lt;- function () {\n  # test get valid variable values\n  variable_list &lt;- get_variable_list(subset=c(\"SEX\", \"PWGTP\", \"GRPIP\"))\n  cat_only &lt;- get_valid_variable_values(\"SEX\", variable_list)\n  num_only &lt;- get_valid_variable_values(\"PWGTP\", variable_list)\n  both &lt;- get_valid_variable_values(\"GRPIP\", variable_list)\n  return (list(cat_only_SEX=cat_only, num_only_PWGTP=num_only, both_GRPIP=both))\n}\n\ntest_5_cv &lt;- function () {\n  # test is valid variable value\n  variable_list &lt;- get_variable_list(subset=c(\"GRPIP\", \"AGEP\", \"SEX\"))\n  print(\"GRPIP\")\n  print(get_valid_variable_values(\"GRPIP\", variable_list))\n  # valid GRPIP\n  for (val in c(\"0\", \"101\", \"1\", \"100\", \"45\")) {\n    if (!is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n      return (FALSE)\n    }\n  }\n  # invalid GRPIP\n  for (val in c(\"102\", \"00\")) {\n    if (is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n      return (FALSE)\n    }\n  }\n\n  print(\"AGEP\")\n  print(get_valid_variable_values(\"AGEP\", variable_list))\n  # valid AGEP\n  for (val in c(\"00\", \"1\", \"99\", \"45\")) {\n    if (!is_valid_variable_value(val, \"AGEP\", variable_list)) {\n      print(val)\n      return (FALSE)\n    }\n  }\n  # invalid AGEP\n  for (val in c(\"100\", \"0\")) {\n    if (is_valid_variable_value(val, \"AGEP\", variable_list)) {\n      return (FALSE)\n    }\n  }\n\n  print(\"SEX\")\n  print(get_valid_variable_values(\"SEX\", variable_list))\n  # valid SEX\n  for (val in c(\"1\", \"2\")) {\n    if (!is_valid_variable_value(val, \"SEX\", variable_list)) {\n      return (FALSE)\n    }\n  }\n  # invalid SEX\n  for (val in c(\"0\", \"3\")) {\n    if (is_valid_variable_value(val, \"SEX\", variable_list)) {\n      return (FALSE)\n    }\n  }\n\n  return (TRUE)\n}\n\n# test_1_cv\n# str(tail(test_1_cv(), 3), max.level=4, list.len=6)\n# test_2_cv\n# str(test_2_cv(), max.level = 4, list.len = 6)\n# test_3_cv\n# test_3_cv()\n# test_4_cv\n# test_4_cv()\n# test_5_cv\n# test_5_cv()\n\n\nstr(tail(test_1_cv(), 3), max.level=4, list.len=6)\n\nList of 3\n $ TEL :List of 6\n  ..$ label           : chr \"Telephone service\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1: chr \"Yes\"\n  .. .. ..$ 0: chr \"N/A (GQ/vacant)\"\n  .. .. ..$ 2: chr \"No\"\n $ TEN :List of 6\n  ..$ label           : chr \"Tenure\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 5\n  .. .. ..$ 1: chr \"Owned with mortgage or loan (include home equity loans)\"\n  .. .. ..$ 0: chr \"N/A  (GQ/vacant)\"\n  .. .. ..$ 4: chr \"Occupied without payment of rent\"\n  .. .. ..$ 3: chr \"Rented\"\n  .. .. ..$ 2: chr \"Owned Free And Clear\"\n $ MLPJ:List of 6\n  ..$ label           : chr \"Served World War II (December 1941 - December 1946)\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"PWGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1 : chr \"Served This Period\"\n  .. .. ..$ 0 : chr \"Did not serve this period\"\n  .. .. ..$ -1: chr \"N/A (Less than 17 years old/no active duty)\"\n\nstr(test_2_cv(), max.level = 4, list.len = 6)\n\nList of 1\n $ PWGTP:List of 6\n  ..$ label        : chr \"PUMS person weight\"\n  ..$ predicateType: chr \"int\"\n  ..$ group        : chr \"N/A\"\n  ..$ limit        : int 0\n  ..$ is-weight    : logi TRUE\n  ..$ values       :List of 1\n  .. ..$ range:'data.frame':    1 obs. of  3 variables:\n  .. .. ..$ min        : chr \"1\"\n  .. .. ..$ max        : chr \"9999\"\n  .. .. ..$ description: chr \"Continuous values of PWGTP\"\n\ntest_3_cv()\n\n[1] TRUE\n\ntest_4_cv()\n\n$cat_only_SEX\n[1] \"1\" \"2\"\n\n$num_only_PWGTP\n min  max \n   1 9999 \n\n$both_GRPIP\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n\ntest_5_cv()\n\n[1] \"GRPIP\"\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n[1] \"AGEP\"\n      min  max \n\"00\"  \"1\" \"99\" \n[1] \"SEX\"\n[1] \"1\" \"2\"\n\n\n[1] TRUE\n\n\n\n\n\n\nis_valid_variable_input &lt;- function(given_list, valid_list, sep=\"=\", with_delim=FALSE) {\n  # Checks if the given list of variables is valid, meaning each item in the list is found in the valid list\n  # left_most side of the variable is exactly within the valid list\n\n  # take the string element and split it based on the delimiter - taking the first item\n  # if with_delim is true, then take the portion up to and including the delimiter\n  strip_value &lt;- function(element) {\n    if (with_delim) {\n      return(substr(element, 1, regexpr(sep, element)))\n    }\n    return(strsplit(element, sep)[[1]][1])\n  }\n\n  # does it match any of the items in the valid list\n  # all the items must match an item in the valid list\n  # ^ ensures it's the start of the string and $ ensures it's the end of the string, so must be hard match to the valid list\n  if (!all(sapply(given_list, function(x) any(grepl(paste0(\"^\", strip_value(x), \"$\"), valid_list))))) {\n    return (FALSE)\n  }\n  return (TRUE)\n}\n\n\nsource(\"src/input_validation.R\")\n\ntest_1_iv &lt;- function() {\n  # test valid default = delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  valid_given_lists &lt;- list(\n    \"AGEP\",\n    c(\"AGEP\", \"PWGTP\", \"SEX\"),\n    c(\"AGEP=abc\", \"PWGTP=123\", \"SEX=\")\n  )\n\n  for (valid_given_list in valid_given_lists) {\n    if (!is_valid_variable_input(valid_given_list, valid_list)) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_2_iv &lt;- function() {\n  # test valid alternate : delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  valid_given_lists &lt;- list(\n    \"AGEP\",\n    c(\"AGEP\", \"PWGTP\", \"SEX\"),\n    c(\"AGEP:abc\", \"PWGTP:123\", \"SEX:\")\n  )\n\n  for (valid_given_list in valid_given_lists) {\n    if (!is_valid_variable_input(valid_given_list, valid_list, sep=\":\")) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_3_iv &lt;- function() {\n  # test valid alternate : delim and including the delim in the match\n  valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n\n  valid_given_lists &lt;- list(\n    \"state:\",\n    c(\"state:\", \"division:5\"),\n    c(\"state:\", \"division:\", \"region:\"),\n    c(\"state:abc\", \"division:123\", \"region:\")\n  )\n\n  for (valid_given_list in valid_given_lists) {\n    if (!is_valid_variable_input(valid_given_list, valid_list, sep=\":\", with_delim = TRUE)) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_4_iv &lt;- function() {\n  # test invalid default = delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  invalid_given_lists &lt;- list(\n    \"AGE\",\n    \"AGEPa\",\n    c(\"AGEP\", \"PWGTP\", \"SAX=1\"),\n    c(\"AGEP\", \"PWGTP:1\")\n  )\n\n  for (invalid_given_list in invalid_given_lists) {\n    if (is_valid_variable_input(invalid_given_list, valid_list)) {\n      return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_5_iv &lt;- function() {\n  # test invalid alternate : delim\n  valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n\n  invalid_given_lists &lt;- list(\n    \"AGE\",\n    \"AGEPa\",\n    c(\"AGEP\", \"PWGTP\", \"SAX:1\"),\n    c(\"AGEP\", \"PWGTP=1\")\n  )\n\n  for (invalid_given_list in invalid_given_lists) {\n    if (is_valid_variable_input(invalid_given_list, valid_list, sep=\":\")) {\n    return(FALSE)\n    }\n  }\n  return (TRUE)\n}\n\ntest_6_iv &lt;- function() {\n  # test invalid alternate : delim and including the delim in the match\n  valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n\n  invalid_given_lists &lt;- list(\n    \"state\",\n    c(\"state:\", \"division=5\"),\n    c(\"state:\", \"division:\", \"region\"),\n    c(\"state:abc\", \"division:123\", \"ST:1\")\n  )\n\n  for (invalid_given_list in invalid_given_lists) {\n    if (is_valid_variable_input(invalid_given_list, valid_list, sep=\":\", with_delim = TRUE)) {\n      return(FALSE)\n    }\n  }\n\n  return (TRUE)\n}\n\n# test_1_iv()\n# test_2_iv()\n# test_3_iv()\n# test_4_iv()\n# test_5_iv()\n# test_6_iv()\n\n\ntest_1_iv()\n\n[1] TRUE\n\ntest_2_iv()\n\n[1] TRUE\n\ntest_3_iv()\n\n[1] TRUE\n\ntest_4_iv()\n\n[1] TRUE\n\ntest_5_iv()\n\n[1] TRUE\n\ntest_6_iv()\n\n[1] TRUE\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\nfix_time_interval_categories &lt;- function(item, value_list) {\n  # takes time intervals of the format \"1:00 a.m. to 1:04 a.m.\"\n  # converts to midpoint \"1:02:00\"\n  sorted_item &lt;- item[sort(names(item))]\n  item_values &lt;- pivot_longer(as.data.frame(sorted_item), cols=everything(), names_to=NULL, values_to=\"time_intervals\")\n  item_df &lt;- pivot_longer(as.data.frame(item_values), cols=everything(), names_to=NULL, values_to=\"time_intervals\")\n  item_df_transformed &lt;- item_df[-1,] |&gt;\n    separate_wider_delim(cols=\"time_intervals\", delim=\" to \", names=c(\"left\", \"right\")) |&gt;\n    mutate(left = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", left)),\n           right = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", right))) |&gt;\n    mutate(left = parse_date_time(left, orders = \"I:M p\", tz = \"UTC\"),\n           right = parse_date_time(right, orders = \"I:M p\", tz = \"UTC\")) |&gt;\n    mutate(midpoint = format(left + (right - left)/2, \"%H:%M:%S\")) |&gt;\n    select(\"midpoint\")\n\n  value_map &lt;- NULL\n  for (value in value_list) {\n    if (value == \"0\") {\n      value_map &lt;- c(value_map, \"NA\")\n      next\n    }\n    value_map &lt;- c(value_map, item_df_transformed$midpoint[as.numeric(value)])\n  }\n  return(value_list=value_map)\n}\n\nconvert_columns_to_numeric &lt;- function(tibble, numeric_item_list, exclude_list=NULL) {\n  tibble &lt;- tibble |&gt;\n    mutate(across(all_of(numeric_item_list[!numeric_item_list %in% exclude_list]), as.integer))\n\n  return (tibble)\n}\n\nremove_categorical_row_items_in_numeric &lt;- function(tibble, variable_info) {\n  # takes a tibble and removes rows where the numeric column is not in the range given for the variable\n  numeric_columns &lt;- tibble |&gt; select(where(is.numeric))\n\n  for (col in names(numeric_columns)) {\n    # Get the min and max range for the current column from variable_info\n    min_val &lt;- as.integer(variable_info[[col]]$values$range$min)\n    max_val &lt;- as.integer(variable_info[[col]]$values$range$max)\n\n    # Filter the tibble rows based on the min and max values for this column\n    tibble &lt;- tibble |&gt;\n      filter(!!sym(col) &gt;= min_val & !!sym(col) &lt;= max_val)\n\n    return (tibble)\n  }\n}\n\nconvert_categorical_to_factor &lt;- function(tibble, variable_info) {\n  # takes the character columns in the tibble and converts them to the factors in the variable list given\n  # does some specific treatment of JWAP, JWDP, state, region, division - particular to census data\n  character_columns &lt;- tibble |&gt; select(where(is.character))\n  for (col in names(character_columns)) {\n    if (col %in% c(\"JWAP\", \"JWDP\") | (!col %in% names(variable_info) & !col %in% c(\"state\", \"region\", \"division\"))) {\n      next\n    }\n    col_var &lt;- col\n    col_var &lt;- ifelse(col == \"state\", \"ST\", col_var)\n    col_var &lt;- ifelse(col == \"region\", \"REGION\", col_var)\n    col_var &lt;- ifelse(col == \"division\", \"DIVISION\", col_var)\n\n    # Get the item values for the current column from variable_info\n    item_values &lt;- variable_info[[col_var]]$values$item\n    # sort the items based on names in reverse order to use labels later\n    item_values &lt;- item_values[order(names(item_values))]\n    # some have 01, 02, etc. but are placed in the lists as 1, 2, etc.\n    names(item_values) &lt;- as.character(as.integer(names(item_values)))\n    # Convert the column to a factor based on the item values\n    tibble &lt;- tibble |&gt;\n      mutate(!!sym(col) := factor(!!sym(col), levels=names(item_values), labels=item_values))\n  }\n  return (tibble)\n}\n\n\nsource(\"src/census_query.R\")\nsource(\"src/census_variables.R\")\nsource(\"src/post_processing.R\")\n\n\ntest_1_pp &lt;- function() {\n  # test the time value conversions for the 2 columns JWAP and JWDP\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=c(\"JWAP\", \"JWDP\"), for_val=\"state:10\"))\n  # lot of duplicate rows - get the unique ones\n  data &lt;- data |&gt; distinct(.keep_all = TRUE)\n  var_filtered &lt;- get_variable_list(\"2022\", c(\"JWAP\", \"JWDP\"))\n  data$JWAP_fixed &lt;- fix_time_interval_categories(var_filtered$JWAP$values$item, data$JWAP)\n  data$JWDP_fixed &lt;- fix_time_interval_categories(var_filtered$JWDP$values$item, data$JWDP)\n\n  # order the var_filtered items columns for better viewing purposes\n  var_filtered$JWAP &lt;- var_filtered$JWAP$values$item[order(names(var_filtered$JWAP$values$item))]\n  var_filtered$JWDP &lt;- var_filtered$JWDP$values$item[order(names(var_filtered$JWDP$values$item))]\n\n  return (list(data=data, var_info=var_filtered))\n}\n\ntest_2_pp &lt;- function() {\n  # test converting columns to numeric, given a list of numeric columns and a list of columns to exclude\n  # str of data will have int where a character was\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=c(\"AGEP\", \"SEX\", \"JWAP\"), for_val=\"state:10\"))\n  data &lt;- convert_columns_to_numeric(data, c(\"AGEP\", \"JWAP\"), \"JWAP\")\n  return (data)\n}\n\ntest_3_pp &lt;- function() {\n  # test the removal of categorical items in numeric columns (removes the 0)\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=\"AGEP\", for_val=\"state:10\"))\n  var_filtered &lt;- get_variable_list(\"2022\", \"AGEP\")\n  data &lt;- data |&gt;\n    distinct(.keep_all = TRUE) |&gt;\n    convert_columns_to_numeric(\"AGEP\") |&gt;\n    remove_categorical_row_items_in_numeric(var_filtered)\n  return (list(data=data, var_info=var_filtered))\n}\n\ntest_4_pp &lt;- function() {\n  # test the replacement of the categorical items with the factor labels\n  data &lt;- census_tibble(census_url(year=\"2022\", get_vals=c(\"AGEP\", \"SEX\", \"HISPEED\"), for_val=\"state:10\"))\n  var_filtered &lt;- get_variable_list(\"2022\", c(\"AGEP\", \"SEX\", \"HISPEED\", \"ST\"))\n  data$SEX_saved &lt;- data$SEX\n  data$HISPEED_saved &lt;- data$HISPEED\n  data$ST_saved &lt;- data$state\n  data &lt;- data |&gt;\n    distinct(.keep_all = TRUE) |&gt;\n    convert_columns_to_numeric(\"AGEP\") |&gt;\n    remove_categorical_row_items_in_numeric(var_filtered) |&gt;\n    convert_categorical_to_factor(var_filtered)\n\n  var_filtered$AGEP &lt;- var_filtered$AGEP$values\n  var_filtered$SEX &lt;- var_filtered$SEX$values$item[order(names(var_filtered$SEX$values$item))]\n  var_filtered$HISPEED &lt;- var_filtered$HISPEED$values$item[order(names(var_filtered$HISPEED$values$item))]\n  var_filtered$ST &lt;- var_filtered$ST$values$item[order(names(var_filtered$ST$values$item))]\n\n  return(list(data=data, var_info=var_filtered))\n}\n\n# data_1_pp &lt;- test_1_pp()\n# str(data_1_pp$data)\n# str(data_1_pp$var_info, max.level=2, list.len=5)\n# data_2_pp &lt;- test_2_pp()\n# str(data_2_pp, max.level=2)\n# data_3_pp &lt;- test_3_pp()\n# # doesnt have 0 in the int list anymore\n# head(table(data_3_pp$data$AGEP), 5)\n#\n# data_4_pp &lt;- test_4_pp()\n# str(data_4_pp$data)\n# str(data_4_pp$var_info, max.level=3, list.len=5)\n\n\ndata_1_pp &lt;- test_1_pp()\nstr(data_1_pp$data)\n\ntibble [771 × 5] (S3: tbl_df/tbl/data.frame)\n $ JWAP      : chr [1:771] \"0\" \"91\" \"106\" \"260\" ...\n $ JWDP      : chr [1:771] \"0\" \"49\" \"55\" \"140\" ...\n $ state     : chr [1:771] \"10\" \"10\" \"10\" \"10\" ...\n $ JWAP_fixed: chr [1:771] \"NA\" \"07:47:00\" \"09:02:00\" \"21:52:00\" ...\n $ JWDP_fixed: chr [1:771] \"NA\" \"07:32:00\" \"08:02:00\" \"21:34:30\" ...\n\nstr(data_1_pp$var_info, max.level=2, list.len=5)\n\nList of 2\n $ JWAP:List of 286\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:04 a.m.\"\n  ..$ 002: chr \"12:05 a.m. to 12:09 a.m.\"\n  ..$ 003: chr \"12:10 a.m. to 12:14 a.m.\"\n  ..$ 004: chr \"12:15 a.m. to 12:19 a.m.\"\n  .. [list output truncated]\n $ JWDP:List of 151\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:29 a.m.\"\n  ..$ 002: chr \"12:30 a.m. to 12:59 a.m.\"\n  ..$ 003: chr \"1:00 a.m. to 1:29 a.m.\"\n  ..$ 004: chr \"1:30 a.m. to 1:59 a.m.\"\n  .. [list output truncated]\n\ndata_2_pp &lt;- test_2_pp()\nstr(data_2_pp, max.level=2)\n\ntibble [9,641 × 4] (S3: tbl_df/tbl/data.frame)\n $ AGEP : int [1:9641] 84 39 19 77 18 32 50 23 20 18 ...\n $ SEX  : chr [1:9641] \"2\" \"2\" \"2\" \"2\" ...\n $ JWAP : chr [1:9641] \"0\" \"0\" \"0\" \"0\" ...\n $ state: chr [1:9641] \"10\" \"10\" \"10\" \"10\" ...\n\ndata_3_pp &lt;- test_3_pp()\n# doesnt have 0 in the int list anymore\nhead(table(data_3_pp$data$AGEP), 5)\n\n\n1 2 3 4 5 \n1 1 1 1 1 \n\ndata_4_pp &lt;- test_4_pp()\nstr(data_4_pp$data)\n\ntibble [513 × 7] (S3: tbl_df/tbl/data.frame)\n $ AGEP         : int [1:513] 69 68 57 61 50 62 58 61 42 19 ...\n $ SEX          : Factor w/ 2 levels \"Male\",\"Female\": 1 2 2 1 2 1 1 2 1 2 ...\n $ HISPEED      : Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 2 2 2 2 2 2 3 3 3 3 ...\n $ state        : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n $ SEX_saved    : chr [1:513] \"1\" \"2\" \"2\" \"1\" ...\n $ HISPEED_saved: chr [1:513] \"1\" \"1\" \"1\" \"1\" ...\n $ ST_saved     : chr [1:513] \"10\" \"10\" \"10\" \"10\" ...\n\nstr(data_4_pp$var_info, max.level=3, list.len=5)\n\nList of 4\n $ AGEP   :List of 2\n  ..$ item :List of 1\n  .. ..$ 00: chr \"Under 1 year\"\n  ..$ range:'data.frame':   1 obs. of  3 variables:\n  .. ..$ min        : chr \"1\"\n  .. ..$ max        : chr \"99\"\n  .. ..$ description: chr \"1 to 99 years (Top-coded***)\"\n $ SEX    :List of 2\n  ..$ 1: chr \"Male\"\n  ..$ 2: chr \"Female\"\n $ HISPEED:List of 3\n  ..$ 0: chr \"N/A (GQ/vacant/no paid access to the internet)\"\n  ..$ 1: chr \"Yes\"\n  ..$ 2: chr \"No\"\n $ ST     :List of 52\n  ..$ 01: chr \"Alabama/AL\"\n  ..$ 02: chr \"Alaska/AK\"\n  ..$ 04: chr \"Arizona/AZ\"\n  ..$ 05: chr \"Arkansas/AR\"\n  ..$ 06: chr \"California/CA\"\n  .. [list output truncated]\n\n\n\n\n\n\nsource(\"src/census_query.R\")\nsource(\"src/census_variables.R\")\nsource(\"src/input_validation.R\")\nsource(\"src/post_processing.R\")\n\nget_data &lt;- function(year=\"2022\", variables=c(\"AGEP\", \"PWGTP\", \"SEX\"), geography_level=\"state:10\") {\n  # check if PWGTP is provided in the variable list. May be PWGTP=30 or PWGTP=30,50\n  if (!any(grepl(\"^PWGTP$\", variables))) {\n    variables &lt;- c(variables, \"PWGTP\")\n  }\n\n  # ensure year is between 2010 and 2022 (inclusive)\n  year_options &lt;- 2010:2022\n  if (!year %in% year_options) {\n    stop(glue(\"Invalid year {year}, should be one of [{glue_collapse(year_options, sep=', ')}]\"))\n  }\n\n  # ensure variables is in the desired set given\n  variable_options &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n  if (!is_valid_variable_input(variables, variable_options)) {\n    stop(glue(\"Invalid variable in [{glue_collapse(variables, sep=', ')}], valid options [{glue_collapse(variable_options, sep=', ')}]\"))\n  }\n\n  geography_options &lt;- c(\"state:\", \"region:\", \"division:\")\n\n  if (geography_level != \"\" & !is_valid_variable_input(geography_level, geography_options, sep=\":\", with_delim=TRUE)) {\n    stop(glue(\"Invalid geography level {geography_level}, should be 'all' or one of [{glue_collapse(geography_options, sep=', ')}]\"))\n  }\n\n  filtered_var_info &lt;- get_variable_list(year, c(variable_options, \"ST\", \"REGION\", \"DIVISION\"))\n  # some years dont have data\n  # remove variables where they don't exist\n  for (var in names(filtered_var_info)) {\n    if (is.null(filtered_var_info[[var]]) | is.null(filtered_var_info[[var]]$values)) {\n      print(paste0(\"removing \", var, \" from year \", year))\n      filtered_var_info &lt;- filtered_var_info[!names(filtered_var_info) %in% var]\n      for (var2 in variables) {\n        if (any(grepl(var, var2))) {\n          print(paste0(\"removing variable \", var2, \" from year \", year))\n          variables &lt;- variables[variables != var2]\n        }\n      }\n    }\n  }\n  # use the most updated variable list for geography level - not in prior years but still can filter\n  # for those years, use prior variables for rest though, in case mapping changed for some reason\n  needed_items &lt;- list()\n  needed_items &lt;- ifelse(is.null(filtered_var_info$ST), c(needed_items, \"ST\"), needed_items)\n  needed_items &lt;- ifelse(is.null(filtered_var_info$REGION), c(needed_items, \"REGION\"), needed_items)\n  needed_items &lt;- ifelse(is.null(filtered_var_info$DIVISION), c(needed_items, \"DIVISION\"), needed_items)\n\n  if (!is.null(needed_items)) {\n    newest_geography_variables &lt;- get_variable_list(2022, needed_items)\n    filtered_var_info &lt;- c(filtered_var_info, newest_geography_variables)\n  }\n\n  # PWGTP always included\n  # AGEP as default, at least 1 numeric variable needs to be returned aside from PWGTP\n  # do for loop that checks if range is in the var_data values (AGEP,PWGTP,etc.) ex) var_data$AGEP$values$range\n\n  # SEX is default categorical variable\n  # at least one categorical variable needs to be returned\n\n  numeric_items_count &lt;- 0\n  categorical_items_count &lt;- 0\n  numeric_item_list &lt;- NULL\n\n  # check and filter the passed in variables\n  for (var in variables) {\n    var_split &lt;- strsplit(var, \"=\")[[1]]\n    var &lt;- var_split[1]\n    values &lt;- var_split[2]\n    # print(paste(var, values, sep=\" \"))\n\n    if (is_numeric_variable(var, filtered_var_info)) {\n      numeric_item_list &lt;- c(numeric_item_list, var)\n      numeric_items_count &lt;- numeric_items_count + 1\n    } else {\n      categorical_items_count &lt;- categorical_items_count + 1\n    }\n    # print(get_valid_variable_values(var, filtered_var_info))\n  }\n\n  if (numeric_items_count &lt;= 1) {\n    variables &lt;- c(variables, \"AGEP\")\n    numeric_item_list &lt;- c(numeric_item_list, \"AGEP\")\n    # print(\"AGEP NA\")\n    # print(get_valid_variable_values(\"AGEP\", filtered_var_info))\n  }\n\n  if (categorical_items_count == 0) {\n    variables &lt;- c(variables, \"SEX\")\n    # print(\"SEX NA\")\n    # print(get_valid_variable_values(\"SEX\", filtered_var_info))\n  }\n\n  var_with_filter &lt;- NULL\n  for (var in variables) {\n    if (regexpr(\"=\", var) != -1) {\n      var_with_filter &lt;- c(var_with_filter, var)\n      variables &lt;- variables[variables != var]\n    }\n  }\n\n  URL &lt;- census_url(year=year, get_vals=variables, get_vals_subset=var_with_filter, for_val=geography_level)\n  parsed_tibble &lt;- census_tibble(URL)\n\n  if (\"JWAP\" %in% names(parsed_tibble)) {\n    parsed_tibble$JWAP &lt;- fix_time_interval_categories(filtered_var_info$JWAP$values$item, parsed_tibble$JWAP)\n  }\n  if (\"JWDP\" %in% names(parsed_tibble)) {\n    parsed_tibble$JWDP &lt;- fix_time_interval_categories(filtered_var_info$JWDP$values$item, parsed_tibble$JWDP)\n  }\n  # print(glue(\"Numeric item list, gets converted to int - [{glue_collapse(numeric_item_list, sep=', ')}]\"))\n  # print(glue(\"List without JWAP and JWDP - [{glue_collapse(numeric_item_list[!numeric_item_list %in% c('JWDP', 'JWAP')], sep=', ')}]\"))\n\n  parsed_tibble &lt;- parsed_tibble |&gt;\n    convert_columns_to_numeric(numeric_item_list, exclude_list=c(\"JWDP\", \"JWAP\")) |&gt;\n    remove_categorical_row_items_in_numeric(filtered_var_info) |&gt;\n    convert_categorical_to_factor(filtered_var_info)\n\n  # TODO time is not split into a numeric value yet\n\n  # add census class to the parsed tibble\n  class(parsed_tibble) &lt;- c(\"census\", class(parsed_tibble))\n  return(list(parsed=parsed_tibble, var_info=filtered_var_info, URL=URL))\n}\n\nget_data_years &lt;- function(years=\"2022\", variables=c(\"AGEP\", \"PWGTP\", \"SEX\"), geography_level=\"state:10\") {\n  # get multiple years of data, removing 2020 if given - year is not valid for some reason\n  years &lt;- years[years != 2020]\n  results &lt;- lapply(years, function(year) get_data(year=year, variables=variables, geography_level=geography_level))\n  names(results) &lt;- years\n  return(results)\n}\n\n\nsource(\"src/main.R\")\n\ntest_1_m &lt;- function() {\n  # test get a year\n  year &lt;- \"2022\"\n  variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n  geography_level &lt;- \"state:10\"\n  return_data &lt;- get_data(\n    year=year,\n    variables=variable_list,\n    geography_level = geography_level\n  )\n  return (return_data)\n}\n\ntest_2_m &lt;- function() {\n  # test get all years in range\n  years &lt;- 2010:2022\n  variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\")\n  geography_level &lt;- \"state:10\"\n  return_data &lt;- get_data_years(\n    years=years,\n    variables=variable_list,\n    geography_level = geography_level\n  )\n  return (return_data)\n}\n\ndata_1_m &lt;- test_1_m()\ndata_1_m$URL\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\n\nstr(data_1_m$parsed)\n\ncensus [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n\ndata_2_m &lt;- test_2_m()\n\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\n\nstr(data_2_m, max.level = 2)\n\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : census [8,494 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : census [8,906 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : census [8,733 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : census [8,682 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : census [8,923 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : census [8,926 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : census [8,801 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : census [8,868 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : census [9,043 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : census [9,197 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : census [9,361 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : census [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n\n\n\ndata_1_m &lt;- test_1_m()\ndata_1_m$URL\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\n\nstr(data_1_m$parsed)\n\ncensus [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n\ndata_2_m &lt;- test_2_m()\n\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\n\nstr(data_2_m, max.level = 2)\n\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : census [8,494 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : census [8,906 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : census [8,733 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : census [8,682 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : census [8,923 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : census [8,926 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : census [8,801 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : census [8,868 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : census [9,043 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : census [9,197 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : census [9,361 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : census [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(quantreg)\n\nLoading required package: SparseM\n\nsummary_census &lt;- function(\n  x,\n  categorical=c(\"SEX\",\"FER\",\"HHL\",\"SCH\",\"SCHL\", \"HISPEED\", \"PWGTP\",\"REGION\",\"DIVISION\",\"STATE\"),\n  numerical=c(\"GASP\", \"GRPIP\",\"AGEP\", \"JWMNP\", \"PWGTP\") # TODO JWAP and JWDP\n) {\n  # Finding mean/sd/counts for numerical and categorical data\n\n  if (!(\"census\" %in% class(x))) {\n    stop(\"Input must be a census object\")\n  }\n\n  # from the inputs, split into categorical and numerical data\n  new_data_cat &lt;- x[names(x) %in% categorical]\n  new_data_num &lt;- x[names(x) %in% numerical]\n\n  cat_counts_result &lt;- NULL\n  num_mean_sd_result &lt;- NULL\n  \n  for (col in names(new_data_cat)) {\n    if (col == \"PWGTP\") {\n      next\n    }\n    \n    cat_counts_result[[col]] &lt;- new_data_cat |&gt;\n      group_by(!!sym(col)) |&gt;\n      summarize(count=sum(PWGTP))\n  }\n\n  for (col in names(new_data_num)) {\n    if (col == \"PWGTP\") {\n      next\n    }\n    num_mean_sd_result[[col]] &lt;- new_data_num |&gt;\n      mutate(new_mult = !!sym(col) * PWGTP) |&gt;\n      summarize(mean=sum(new_mult) / sum(PWGTP),\n                sd=sqrt(sum(PWGTP * (!!sym(col) - mean)^2) / sum(PWGTP)))\n  }\n\n  return (list(cat_results=cat_counts_result, num_results=num_mean_sd_result))\n}\n\n# # We chose to investigate the populations educational level base on age. We were interested in showing people who are typical school age range.\n# parsed2&lt;- parsed %&gt;%\n#   filter(AGEP&lt;=40 & AGEP &gt;=5)%&gt;%\n#   ggplot(aes(x =SCH, y =AGEP, weight= PWGTP,fill = SCH, color = SCH))+\n#   geom_boxplot()\n# print(parsed2)\n\nplot_census &lt;- function(x, categorical=\"SCH\", numerical=\"AGEP\") {\n  if (!(\"census\" %in% class(x))) {\n    stop(\"Input must be a census object\")\n  }\n\n  if (length(categorical) != 1 | length(numerical) != 1) {\n    stop(\"Only one categorical and one numerical variable can be plotted\")\n  }\n\n  x |&gt;\n    ggplot(aes(x=!!sym(categorical), y=!!sym(numerical), weight=PWGTP)) +\n      geom_boxplot()\n}\n\n\nsource(\"src/summarizing.R\")\nsource(\"src/main.R\")\nsource(\"test/test_main.R\")\n\ncensus [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : census [8,494 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : census [8,906 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : census [8,733 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : census [8,682 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : census [8,923 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : census [8,926 × 13] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 15\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : census [8,801 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : census [8,868 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : census [9,043 × 14] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 16\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : census [9,197 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : census [9,361 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : census [9,569 × 15] (S3: census/tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n\ntest_1_s &lt;- function() {\n  parsed &lt;- test_1_m()$parsed\n  return (summary_census(parsed))\n}\n\ntest_2_s &lt;- function() {\n  parsed &lt;- test_1_m()$parsed\n  plot_census(parsed)\n}\n\n# data_1_s &lt;- test_1_s()\n# str(data_1_s, max.level = 2)\n# data_1_s_summary &lt;- summary_census(data_1_s)\n# plot_census(data_1_s)\n\n\n# parsed &lt;- return_data$parsed\n#\n# summary_census(parsed)\n#\n# #Plot of information\n#\n# # library(ggplot2)\n# # library(quantreg)\n# # library(reshape2)\n# # We chose to investigate the populations educational level base on age. We were interested in showing people who are typical school age range.\n# parsed2&lt;- parsed %&gt;%\n#   filter(AGEP&lt;=40 & AGEP &gt;=5)%&gt;%\n#   ggplot(aes(x =SCH, y =AGEP, weight= PWGTP,fill = SCH, color = SCH))+\n#   geom_boxplot()\n# print(parsed2)\n\n\ntest_1_s()\n\n$cat_results\n$cat_results$SEX\n# A tibble: 2 × 2\n  SEX     count\n  &lt;fct&gt;   &lt;int&gt;\n1 Male   488442\n2 Female 520323\n\n$cat_results$FER\n# A tibble: 3 × 2\n  FER                                                   count\n  &lt;fct&gt;                                                 &lt;int&gt;\n1 N/A (less than 15 years/greater than 50 years/ male) 785329\n2 Yes                                                   10669\n3 No                                                   212767\n\n$cat_results$HHL\n# A tibble: 6 × 2\n  HHL                                 count\n  &lt;fct&gt;                               &lt;int&gt;\n1 N/A (GQ/vacant)                     22688\n2 English Only                       796054\n3 Spanish                             95801\n4 Other Indo-European languages       41022\n5 Asian and Pacific Island languages  29736\n6 Other Language                      23464\n\n$cat_results$HISPEED\n# A tibble: 3 × 2\n  HISPEED                                         count\n  &lt;fct&gt;                                           &lt;int&gt;\n1 N/A (GQ/vacant/no paid access to the internet)  74950\n2 Yes                                            830510\n3 No                                             103305\n\n$cat_results$SCH\n# A tibble: 4 × 2\n  SCH                                            count\n  &lt;fct&gt;                                          &lt;int&gt;\n1 N/A (less than 3 years old)                    20751\n2 No, has not attended in the last 3 months     755797\n3 Yes, public school or public college          195091\n4 Yes, private school or college or home school  37126\n\n$cat_results$SCHL\n# A tibble: 25 × 2\n   SCHL                        count\n   &lt;fct&gt;                       &lt;int&gt;\n 1 N/A (less than 3 years old) 20751\n 2 No schooling completed      29639\n 3 Nursery school, preschool   16425\n 4 Kindergarten                13248\n 5 Grade 1                     10178\n 6 Grade 2                     10938\n 7 Grade 3                     12126\n 8 Grade 4                     12208\n 9 Grade 5                     11754\n10 Grade 6                     14467\n# ℹ 15 more rows\n\n\n$num_results\n$num_results$AGEP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  42.0  23.6\n\n$num_results$GASP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  64.1  135.\n\n$num_results$GRPIP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  7.84  19.1\n\n$num_results$JWMNP\n# A tibble: 1 × 2\n   mean    sd\n  &lt;dbl&gt; &lt;dbl&gt;\n1  10.8  19.4\n\ntest_2_s()"
  }
]