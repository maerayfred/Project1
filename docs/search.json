[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "# Calling libraries\n#library(tidyverse)\n#library(tidycensus)\n#library(httr)\n#library(jsonlite)\n#library(glue)\n\n\n\n\n\nsource(\"src/census_query.R\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\ncensus_tibble\n\nfunction (URL) \n{\n    id_info &lt;- httr::GET(URL)\n    parsed &lt;- fromJSON(rawToChar(id_info$content))\n    parsed_tibble &lt;- as_tibble(parsed[-1, ])\n    colnames(parsed_tibble) &lt;- parsed[1, ]\n    return(parsed_tibble)\n}\n\nsource(\"test/test_census_query.R\")\ntest_1\n\nfunction () \n{\n    URL &lt;- census_url()\n    return(URL)\n}\n\ntest_1()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2\n\nfunction () \n{\n    URL &lt;- census_url(get_vals = NULL, get_vals_subset = NULL, \n        for_val = NULL)\n    return(URL)\n}\n\ntest_2()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3\n\nfunction () \n{\n    URL &lt;- census_url(year = 2021, get_vals = c(\"HISPEED\", \"PWGTP\"), \n        get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:32\"), \n        for_val = \"region:1\")\n    return(URL)\n}\n\ntest_3()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:32&for=region:1\n\ntest_4\n\nfunction () \n{\n    URL &lt;- test_3()\n    return(census_tibble(URL))\n}\n\ntest_4()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n# A tibble: 33 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 0       239   0     2     32    1     \n 2 1       118   0     2     31    1     \n 3 1       233   0     2     32    1     \n 4 1       234   0     2     32    1     \n 5 1       215   0     2     31    1     \n 6 1       112   0     2     31    1     \n 7 1       65    0     2     32    1     \n 8 1       43    0     2     32    1     \n 9 1       109   0     2     30    1     \n10 1       45    0     2     32    1     \n# ℹ 23 more rows\n\n\n\n\n\n\nsource(\"src/census_variables.R\")\nget_variable_list\n\nfunction (year = \"2022\", subset = NULL) \n{\n    URL_VARIABLES &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums/variables.json\")\n    var_info &lt;- httr::GET(URL_VARIABLES)\n    var_info_parsed &lt;- fromJSON(rawToChar(var_info$content))\n    var_info_tibble &lt;- as_tibble(var_info_parsed)$variables\n    if (is.null(subset)) {\n        return(var_info_tibble)\n    }\n    var_data &lt;- list()\n    for (var in subset) {\n        var_data[var] &lt;- var_info_tibble[var]\n    }\n    return(var_data)\n}\n\nis_numeric_variable\n\nfunction (var, var_info_tibble) \n{\n    if (!is.null(var_info_tibble[[var]]$values$range) | var %in% \n        c(\"JWAP\", \"JWDP\")) {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\nget_valid_variable_values\n\nfunction (var, var_info_tibble) \n{\n    var_range &lt;- var_info_tibble[[var]]$values$range\n    var_item &lt;- var_info_tibble[[var]]$values$item\n    ret &lt;- c()\n    if (!is.null(var_item)) {\n        ret &lt;- c(ret, names(var_item))\n    }\n    if (!is.null(var_range)) {\n        min &lt;- as.numeric(var_range$min)\n        max &lt;- as.numeric(var_range$max)\n        ret &lt;- c(ret, c(min = min, max = max))\n    }\n    return(ret)\n}\n\nis_valid_variable_value\n\nfunction (val, var, var_info_tibble) \n{\n    valid_values &lt;- get_valid_variable_values(var, var_info_tibble)\n    if (val %in% valid_values) {\n        return(TRUE)\n    }\n    if (\"min\" %in% names(valid_values) & \"max\" %in% names(valid_values)) {\n        min &lt;- as.numeric(valid_values[\"min\"])\n        max &lt;- as.numeric(valid_values[\"max\"])\n        num_val &lt;- as.numeric(val)\n        return(num_val &gt;= min & num_val &lt;= max)\n    }\n    return(FALSE)\n}\n\nsource(\"test/test_census_variables.R\")\ntest_1\n\nfunction () \n{\n    var_list &lt;- get_variable_list()\n    return(var_list)\n}\n\nstr(tail(test_1(), 3), max.level=4, list.len=6)\n\nList of 3\n $ TEL :List of 6\n  ..$ label           : chr \"Telephone service\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1: chr \"Yes\"\n  .. .. ..$ 0: chr \"N/A (GQ/vacant)\"\n  .. .. ..$ 2: chr \"No\"\n $ TEN :List of 6\n  ..$ label           : chr \"Tenure\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 5\n  .. .. ..$ 1: chr \"Owned with mortgage or loan (include home equity loans)\"\n  .. .. ..$ 0: chr \"N/A  (GQ/vacant)\"\n  .. .. ..$ 4: chr \"Occupied without payment of rent\"\n  .. .. ..$ 3: chr \"Rented\"\n  .. .. ..$ 2: chr \"Owned Free And Clear\"\n $ MLPJ:List of 6\n  ..$ label           : chr \"Served World War II (December 1941 - December 1946)\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"PWGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1 : chr \"Served This Period\"\n  .. .. ..$ 0 : chr \"Did not serve this period\"\n  .. .. ..$ -1: chr \"N/A (Less than 17 years old/no active duty)\"\n\ntest_2\n\nfunction () \n{\n    var_list &lt;- get_variable_list(subset = c(\"PWGTP\"))\n    return(var_list)\n}\n\nstr(test_2(), max.level = 4, list.len = 6)\n\nList of 1\n $ PWGTP:List of 6\n  ..$ label        : chr \"PUMS person weight\"\n  ..$ predicateType: chr \"int\"\n  ..$ group        : chr \"N/A\"\n  ..$ limit        : int 0\n  ..$ is-weight    : logi TRUE\n  ..$ values       :List of 1\n  .. ..$ range:'data.frame':    1 obs. of  3 variables:\n  .. .. ..$ min        : chr \"1\"\n  .. .. ..$ max        : chr \"9999\"\n  .. .. ..$ description: chr \"Continuous values of PWGTP\"\n\ntest_3\n\nfunction () \n{\n    all_var_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\", \"REGION\", \"DIVISION\", \"ST\")\n    numeric_var_list &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \n        \"JWMNP\", \"PWGTP\")\n    categorical_var_list &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\", \"SEX\", \"REGION\", \"DIVISION\", \"ST\")\n    filtered_var_list &lt;- get_variable_list(subset = all_var_list)\n    for (var in all_var_list) {\n        if (is_numeric_variable(var, filtered_var_list)) {\n            if (!var %in% numeric_var_list) {\n                return(FALSE)\n            }\n        }\n        else {\n            if (!var %in% categorical_var_list) {\n                return(FALSE)\n            }\n        }\n    }\n    return(TRUE)\n}\n\ntest_3()\n\n[1] TRUE\n\ntest_4\n\nfunction () \n{\n    variable_list &lt;- get_variable_list(subset = c(\"SEX\", \"PWGTP\", \n        \"GRPIP\"))\n    cat_only &lt;- get_valid_variable_values(\"SEX\", variable_list)\n    num_only &lt;- get_valid_variable_values(\"PWGTP\", variable_list)\n    both &lt;- get_valid_variable_values(\"GRPIP\", variable_list)\n    return(list(cat_only_SEX = cat_only, num_only_PWGTP = num_only, \n        both_GRPIP = both))\n}\n\ntest_4()\n\n$cat_only_SEX\n[1] \"1\" \"2\"\n\n$num_only_PWGTP\n min  max \n   1 9999 \n\n$both_GRPIP\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n\ntest_5\n\nfunction () \n{\n    variable_list &lt;- get_variable_list(subset = c(\"GRPIP\", \"AGEP\", \n        \"SEX\"))\n    print(\"GRPIP\")\n    print(get_valid_variable_values(\"GRPIP\", variable_list))\n    for (val in c(\"0\", \"101\", \"1\", \"100\", \"45\")) {\n        if (!is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    for (val in c(\"102\", \"00\")) {\n        if (is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    print(\"AGEP\")\n    print(get_valid_variable_values(\"AGEP\", variable_list))\n    for (val in c(\"00\", \"1\", \"99\", \"45\")) {\n        if (!is_valid_variable_value(val, \"AGEP\", variable_list)) {\n            print(val)\n            return(FALSE)\n        }\n    }\n    for (val in c(\"100\", \"0\")) {\n        if (is_valid_variable_value(val, \"AGEP\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    print(\"SEX\")\n    print(get_valid_variable_values(\"SEX\", variable_list))\n    for (val in c(\"1\", \"2\")) {\n        if (!is_valid_variable_value(val, \"SEX\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    for (val in c(\"0\", \"3\")) {\n        if (is_valid_variable_value(val, \"SEX\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_5()\n\n[1] \"GRPIP\"\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n[1] \"AGEP\"\n      min  max \n\"00\"  \"1\" \"99\" \n[1] \"SEX\"\n[1] \"1\" \"2\"\n\n\n[1] TRUE\n\n\n\n\n\n\nsource(\"src/input_validation.R\")\nis_valid_variable_input\n\nfunction (given_list, valid_list, sep = \"=\", with_delim = FALSE) \n{\n    strip_value &lt;- function(element) {\n        if (with_delim) {\n            return(substr(element, 1, regexpr(sep, element)))\n        }\n        return(strsplit(element, sep)[[1]][1])\n    }\n    if (!all(sapply(given_list, function(x) any(grepl(paste0(\"^\", \n        strip_value(x), \"$\"), valid_list))))) {\n        return(FALSE)\n    }\n    return(TRUE)\n}\n\nsource(\"test/test_input_validation.R\")\ntest_1\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP=abc\", \"PWGTP=123\", \"SEX=\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_1()\n\n[1] TRUE\n\ntest_2\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP:abc\", \"PWGTP:123\", \"SEX:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_2()\n\n[1] TRUE\n\ntest_3\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    valid_given_lists &lt;- list(\"state:\", c(\"state:\", \"division:5\"), \n        c(\"state:\", \"division:\", \"region:\"), c(\"state:abc\", \"division:123\", \n            \"region:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_3()\n\n[1] TRUE\n\ntest_4\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX=1\"), c(\"AGEP\", \"PWGTP:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_4()\n\n[1] TRUE\n\ntest_5\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX:1\"), c(\"AGEP\", \"PWGTP=1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_5()\n\n[1] TRUE\n\ntest_6\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    invalid_given_lists &lt;- list(\"state\", c(\"state:\", \"division=5\"), \n        c(\"state:\", \"division:\", \"region\"), c(\"state:abc\", \"division:123\", \n            \"ST:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_6()\n\n[1] TRUE\n\n\n\n\n\n\nsource(\"src/post_processing.R\")\nfix_time_interval_categories\n\nfunction (item, value_list) \n{\n    sorted_item &lt;- item[sort(names(item))]\n    item_values &lt;- pivot_longer(as.data.frame(sorted_item), cols = everything(), \n        names_to = NULL, values_to = \"time_intervals\")\n    item_df &lt;- pivot_longer(as.data.frame(item_values), cols = everything(), \n        names_to = NULL, values_to = \"time_intervals\")\n    item_df_transformed &lt;- select(mutate(mutate(mutate(separate_wider_delim(item_df[-1, \n        ], cols = \"time_intervals\", delim = \" to \", names = c(\"left\", \n        \"right\")), left = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", \n        left)), right = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", \n        right))), left = parse_date_time(left, orders = \"I:M p\", \n        tz = \"UTC\"), right = parse_date_time(right, orders = \"I:M p\", \n        tz = \"UTC\")), midpoint = format(left + (right - left)/2, \n        \"%H:%M:%S\")), \"midpoint\")\n    value_map &lt;- c()\n    for (value in value_list) {\n        if (value == \"0\") {\n            value_map &lt;- c(value_map, \"NA\")\n            next\n        }\n        value_map &lt;- c(value_map, item_df_transformed$midpoint[as.numeric(value)])\n    }\n    return(value_list = value_map)\n}\n\nconvert_columns_to_numeric\n\nfunction (tibble, numeric_item_list, exclude_list = NULL) \n{\n    tibble &lt;- mutate(tibble, across(all_of(numeric_item_list[!numeric_item_list %in% \n        exclude_list]), as.integer))\n    return(tibble)\n}\n\nremove_categorical_row_items_in_numeric\n\nfunction (tibble, variable_info) \n{\n    numeric_columns &lt;- select(tibble, where(is.numeric))\n    for (col in names(numeric_columns)) {\n        min_val &lt;- as.integer(variable_info[[col]]$values$range$min)\n        max_val &lt;- as.integer(variable_info[[col]]$values$range$max)\n        tibble &lt;- filter(tibble, !!sym(col) &gt;= min_val & !!sym(col) &lt;= \n            max_val)\n        return(tibble)\n    }\n}\n\nconvert_categorical_to_factor\n\nfunction (tibble, variable_info) \n{\n    character_columns &lt;- select(tibble, where(is.character))\n    for (col in names(character_columns)) {\n        if (col %in% c(\"JWAP\", \"JWDP\") | (!col %in% names(variable_info) & \n            !col %in% c(\"state\", \"region\", \"division\"))) {\n            next\n        }\n        col_var &lt;- col\n        col_var &lt;- ifelse(col == \"state\", \"ST\", col_var)\n        col_var &lt;- ifelse(col == \"region\", \"REGION\", col_var)\n        col_var &lt;- ifelse(col == \"division\", \"DIVISION\", col_var)\n        item_values &lt;- variable_info[[col_var]]$values$item\n        item_values &lt;- item_values[order(names(item_values))]\n        names(item_values) &lt;- as.character(as.integer(names(item_values)))\n        tibble &lt;- mutate(tibble, `:=`(!!sym(col), factor(!!sym(col), \n            levels = names(item_values), labels = item_values)))\n    }\n    return(tibble)\n}\n\nsource(\"test/test_post_processing.R\")\ntest_1\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = c(\"JWAP\", \n        \"JWDP\"), for_val = \"state:10\"))\n    data &lt;- distinct(data, .keep_all = TRUE)\n    var_filtered &lt;- get_variable_list(\"2022\", c(\"JWAP\", \"JWDP\"))\n    data$JWAP_fixed &lt;- fix_time_interval_categories(var_filtered$JWAP$values$item, \n        data$JWAP)\n    data$JWDP_fixed &lt;- fix_time_interval_categories(var_filtered$JWDP$values$item, \n        data$JWDP)\n    var_filtered$JWAP &lt;- var_filtered$JWAP$values$item[order(names(var_filtered$JWAP$values$item))]\n    var_filtered$JWDP &lt;- var_filtered$JWDP$values$item[order(names(var_filtered$JWDP$values$item))]\n    return(list(data = data, var_info = var_filtered))\n}\n\ndata_1 &lt;- test_1()\nstr(data_1$data)\n\ntibble [771 × 5] (S3: tbl_df/tbl/data.frame)\n $ JWAP      : chr [1:771] \"0\" \"74\" \"76\" \"109\" ...\n $ JWDP      : chr [1:771] \"0\" \"31\" \"31\" \"67\" ...\n $ state     : chr [1:771] \"10\" \"10\" \"10\" \"10\" ...\n $ JWAP_fixed: chr [1:771] \"NA\" \"06:22:00\" \"06:32:00\" \"09:17:00\" ...\n $ JWDP_fixed: chr [1:771] \"NA\" \"06:02:00\" \"06:02:00\" \"09:02:00\" ...\n\nstr(data_1$var_info, max.level=2, list.len=5)\n\nList of 2\n $ JWAP:List of 286\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:04 a.m.\"\n  ..$ 002: chr \"12:05 a.m. to 12:09 a.m.\"\n  ..$ 003: chr \"12:10 a.m. to 12:14 a.m.\"\n  ..$ 004: chr \"12:15 a.m. to 12:19 a.m.\"\n  .. [list output truncated]\n $ JWDP:List of 151\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:29 a.m.\"\n  ..$ 002: chr \"12:30 a.m. to 12:59 a.m.\"\n  ..$ 003: chr \"1:00 a.m. to 1:29 a.m.\"\n  ..$ 004: chr \"1:30 a.m. to 1:59 a.m.\"\n  .. [list output truncated]\n\ntest_2\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = c(\"AGEP\", \n        \"SEX\", \"JWAP\"), for_val = \"state:10\"))\n    data &lt;- convert_columns_to_numeric(data, c(\"AGEP\", \"JWAP\"), \n        \"JWAP\")\n    return(data)\n}\n\ndata_2 &lt;- test_2()\nstr(data_2, max.level=2)\n\ntibble [9,641 × 4] (S3: tbl_df/tbl/data.frame)\n $ AGEP : int [1:9641] 84 39 19 77 18 32 50 23 20 18 ...\n $ SEX  : chr [1:9641] \"2\" \"2\" \"2\" \"2\" ...\n $ JWAP : chr [1:9641] \"0\" \"0\" \"0\" \"0\" ...\n $ state: chr [1:9641] \"10\" \"10\" \"10\" \"10\" ...\n\ntest_3\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = \"AGEP\", \n        for_val = \"state:10\"))\n    var_filtered &lt;- get_variable_list(\"2022\", \"AGEP\")\n    data &lt;- remove_categorical_row_items_in_numeric(convert_columns_to_numeric(distinct(data, \n        .keep_all = TRUE), c(\"AGEP\")), var_filtered)\n    return(list(data = data, var_info = var_filtered))\n}\n\ndata_3 &lt;- test_3()\n# doesnt have 0 in the int list anymore\nhead(table(data_3$data$AGEP), 5)\n\n\n1 2 3 4 5 \n1 1 1 1 1 \n\ntest_4\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = c(\"AGEP\", \n        \"SEX\", \"HISPEED\"), for_val = \"state:10\"))\n    var_filtered &lt;- get_variable_list(\"2022\", c(\"AGEP\", \"SEX\", \n        \"HISPEED\", \"ST\"))\n    data$SEX_saved &lt;- data$SEX\n    data$HISPEED_saved &lt;- data$HISPEED\n    data$ST_saved &lt;- data$state\n    data &lt;- convert_categorical_to_factor(remove_categorical_row_items_in_numeric(convert_columns_to_numeric(distinct(data, \n        .keep_all = TRUE), \"AGEP\"), var_filtered), var_filtered)\n    var_filtered$AGEP &lt;- var_filtered$AGEP$values\n    var_filtered$SEX &lt;- var_filtered$SEX$values$item[order(names(var_filtered$SEX$values$item))]\n    var_filtered$HISPEED &lt;- var_filtered$HISPEED$values$item[order(names(var_filtered$HISPEED$values$item))]\n    var_filtered$ST &lt;- var_filtered$ST$values$item[order(names(var_filtered$ST$values$item))]\n    return(list(data = data, var_info = var_filtered))\n}\n\ndata_4 &lt;- test_4()\nstr(data_4$data)\n\ntibble [513 × 7] (S3: tbl_df/tbl/data.frame)\n $ AGEP         : int [1:513] 84 39 19 77 18 32 50 23 20 93 ...\n $ SEX          : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ HISPEED      : Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ state        : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n $ SEX_saved    : chr [1:513] \"2\" \"2\" \"2\" \"2\" ...\n $ HISPEED_saved: chr [1:513] \"0\" \"0\" \"0\" \"0\" ...\n $ ST_saved     : chr [1:513] \"10\" \"10\" \"10\" \"10\" ...\n\nstr(data_4$var_info, max.level=3, list.len=5)\n\nList of 4\n $ AGEP   :List of 2\n  ..$ item :List of 1\n  .. ..$ 00: chr \"Under 1 year\"\n  ..$ range:'data.frame':   1 obs. of  3 variables:\n  .. ..$ min        : chr \"1\"\n  .. ..$ max        : chr \"99\"\n  .. ..$ description: chr \"1 to 99 years (Top-coded***)\"\n $ SEX    :List of 2\n  ..$ 1: chr \"Male\"\n  ..$ 2: chr \"Female\"\n $ HISPEED:List of 3\n  ..$ 0: chr \"N/A (GQ/vacant/no paid access to the internet)\"\n  ..$ 1: chr \"Yes\"\n  ..$ 2: chr \"No\"\n $ ST     :List of 52\n  ..$ 01: chr \"Alabama/AL\"\n  ..$ 02: chr \"Alaska/AK\"\n  ..$ 04: chr \"Arizona/AZ\"\n  ..$ 05: chr \"Arkansas/AR\"\n  ..$ 06: chr \"California/CA\"\n  .. [list output truncated]\n\n\n\n\n\n\nsource(\"src/main.R\")\nget_data\n\nfunction (year = \"2022\", variables = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    geography_level = \"state:10\") \n{\n    if (!any(grepl(\"^PWGTP$\", variables))) {\n        variables &lt;- c(variables, \"PWGTP\")\n    }\n    year_options &lt;- c(2010:2022)\n    if (!year %in% year_options) {\n        stop(glue(\"Invalid year {year}, should be one of [{glue_collapse(year_options, sep=', ')}]\"))\n    }\n    variable_options &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\")\n    if (!is_valid_variable_input(variables, variable_options)) {\n        stop(glue(\"Invalid variable in [{glue_collapse(variables, sep=', ')}], valid options [{glue_collapse(variable_options, sep=', ')}]\"))\n    }\n    geography_options &lt;- c(\"state:\", \"region:\", \"division:\")\n    if (geography_level != \"\" & !is_valid_variable_input(geography_level, \n        geography_options, sep = \":\", with_delim = TRUE)) {\n        stop(glue(\"Invalid geography level {geography_level}, should be 'all' or one of [{glue_collapse(geography_options, sep=', ')}]\"))\n    }\n    filtered_var_info &lt;- get_variable_list(year, c(variable_options, \n        \"ST\", \"REGION\", \"DIVISION\"))\n    for (var in names(filtered_var_info)) {\n        if (is.null(filtered_var_info[[var]]) | is.null(filtered_var_info[[var]]$values)) {\n            print(paste0(\"removing \", var, \" from year \", year))\n            filtered_var_info &lt;- filtered_var_info[!names(filtered_var_info) %in% \n                var]\n            for (var2 in variables) {\n                if (any(grepl(var, var2))) {\n                  print(paste0(\"removing variable \", var2, \" from year \", \n                    year))\n                  variables &lt;- variables[variables != var2]\n                }\n            }\n        }\n    }\n    newest_geography_variables &lt;- get_variable_list(2022, c(\"ST\", \n        \"REGION\", \"DIVISION\"))\n    filtered_var_info &lt;- c(filtered_var_info, newest_geography_variables)\n    numeric_items_count &lt;- 0\n    categorical_items_count &lt;- 0\n    numeric_item_list &lt;- c()\n    for (var in variables) {\n        var_split &lt;- strsplit(var, \"=\")[[1]]\n        var &lt;- var_split[1]\n        values &lt;- var_split[2]\n        if (is_numeric_variable(var, filtered_var_info)) {\n            numeric_item_list &lt;- c(numeric_item_list, var)\n            numeric_items_count &lt;- numeric_items_count + 1\n        }\n        else {\n            categorical_items_count &lt;- categorical_items_count + \n                1\n        }\n    }\n    if (numeric_items_count &lt;= 1) {\n        variables &lt;- c(variables, \"AGEP\")\n        numeric_item_list &lt;- c(numeric_item_list, \"AGEP\")\n    }\n    if (categorical_items_count == 0) {\n        variables &lt;- c(variables, \"SEX\")\n    }\n    var_with_filter &lt;- c()\n    for (var in variables) {\n        if (regexpr(\"=\", var) != -1) {\n            var_with_filter &lt;- c(var_with_filter, var)\n            variables &lt;- variables[variables != var]\n        }\n    }\n    URL &lt;- census_url(year = year, get_vals = variables, get_vals_subset = var_with_filter, \n        for_val = geography_level)\n    parsed_tibble &lt;- census_tibble(URL)\n    if (\"JWAP\" %in% names(parsed_tibble)) {\n        parsed_tibble$JWAP &lt;- fix_time_interval_categories(filtered_var_info$JWAP$values$item, \n            parsed_tibble$JWAP)\n    }\n    if (\"JWDP\" %in% names(parsed_tibble)) {\n        parsed_tibble$JWDP &lt;- fix_time_interval_categories(filtered_var_info$JWDP$values$item, \n            parsed_tibble$JWDP)\n    }\n    parsed_tibble &lt;- convert_categorical_to_factor(remove_categorical_row_items_in_numeric(convert_columns_to_numeric(parsed_tibble, \n        numeric_item_list, exclude_list = c(\"JWDP\", \"JWAP\")), \n        filtered_var_info), filtered_var_info)\n    return(list(parsed = parsed_tibble, var_info = filtered_var_info, \n        URL = URL))\n}\n\nget_data_years\n\nfunction (years = \"2022\", variables = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    geography_level = \"state:10\") \n{\n    years &lt;- years[years != 2020]\n    results &lt;- lapply(years, function(year) get_data(year = year, \n        variables = variables, geography_level = geography_level))\n    names(results) &lt;- years\n    return(results)\n}\n\nsource(\"test/test_main.R\")\ntest_1\n\nfunction () \n{\n    year &lt;- \"2022\"\n    variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\")\n    geography_level &lt;- \"state:10\"\n    return_data &lt;- get_data(year = year, variables = variable_list, \n        geography_level = geography_level)\n    return(return_data)\n}\n\ndata_1 &lt;- test_1()\ndata_1$URL\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\n\nstr(data_1$parsed)\n\ntibble [9,569 × 15] (S3: tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n\ntest_2\n\nfunction () \n{\n    years &lt;- c(2010:2022)\n    variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\")\n    geography_level &lt;- \"state:10\"\n    return_data &lt;- get_data_years(years = years, variables = variable_list, \n        geography_level = geography_level)\n    return(return_data)\n}\n\ndata_2 &lt;- test_2()\n\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\n\nstr(data_2, max.level = 2)\n\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : tibble [8,494 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : tibble [8,906 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : tibble [8,733 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : tibble [8,682 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : tibble [8,923 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : tibble [8,926 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : tibble [8,801 × 14] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 18\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : tibble [8,868 × 14] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 18\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : tibble [9,043 × 14] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 18\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : tibble [9,197 × 15] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 19\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : tibble [9,361 × 15] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 20\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : tibble [9,569 × 15] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 20\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__"
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "Project1",
    "section": "",
    "text": "# Calling libraries\n#library(tidyverse)\n#library(tidycensus)\n#library(httr)\n#library(jsonlite)\n#library(glue)\n\n\n\n\n\nsource(\"src/census_query.R\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()  masks stats::filter()\n✖ purrr::flatten() masks jsonlite::flatten()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncensus_url\n\nfunction (year = \"2022\", get_vals = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    get_vals_subset = NULL, for_val = \"state:10\") \n{\n    BASE_URL &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums\")\n    get_vals_str &lt;- ifelse((vals &lt;- paste(get_vals, collapse = \",\")) != \n        \"\", glue(\"get={vals}\"), \"\")\n    get_vals_subset_str &lt;- paste(get_vals_subset, collapse = \"&\")\n    for_str &lt;- ifelse(for_val != \"\", glue(\"for={for_val}\"), \"\")\n    suffix_list &lt;- c(get_vals_str, get_vals_subset_str, for_str)\n    suffix &lt;- paste(suffix_list[suffix_list != \"\"], collapse = \"&\")\n    return(glue(\"{BASE_URL}?{suffix}\"))\n}\n\ncensus_tibble\n\nfunction (URL) \n{\n    id_info &lt;- httr::GET(URL)\n    parsed &lt;- fromJSON(rawToChar(id_info$content))\n    parsed_tibble &lt;- as_tibble(parsed[-1, ])\n    colnames(parsed_tibble) &lt;- parsed[1, ]\n    return(parsed_tibble)\n}\n\nsource(\"test/test_census_query.R\")\ntest_1\n\nfunction () \n{\n    URL &lt;- census_url()\n    return(URL)\n}\n\ntest_1()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:10\n\ntest_2\n\nfunction () \n{\n    URL &lt;- census_url(get_vals = NULL, get_vals_subset = NULL, \n        for_val = NULL)\n    return(URL)\n}\n\ntest_2()\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?\n\ntest_3\n\nfunction () \n{\n    URL &lt;- census_url(year = 2021, get_vals = c(\"HISPEED\", \"PWGTP\"), \n        get_vals_subset = c(\"AGEP=00\", \"SEX=2\", \"GRPIP=30:32\"), \n        for_val = \"region:1\")\n    return(URL)\n}\n\ntest_3()\n\nhttps://api.census.gov/data/2021/acs/acs1/pums?get=HISPEED,PWGTP&AGEP=00&SEX=2&GRPIP=30:32&for=region:1\n\ntest_4\n\nfunction () \n{\n    URL &lt;- test_3()\n    return(census_tibble(URL))\n}\n\ntest_4()\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n# A tibble: 33 × 6\n   HISPEED PWGTP AGEP  SEX   GRPIP region\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 0       239   0     2     32    1     \n 2 1       118   0     2     31    1     \n 3 1       233   0     2     32    1     \n 4 1       234   0     2     32    1     \n 5 1       215   0     2     31    1     \n 6 1       112   0     2     31    1     \n 7 1       65    0     2     32    1     \n 8 1       43    0     2     32    1     \n 9 1       109   0     2     30    1     \n10 1       45    0     2     32    1     \n# ℹ 23 more rows\n\n\n\n\n\n\nsource(\"src/census_variables.R\")\nget_variable_list\n\nfunction (year = \"2022\", subset = NULL) \n{\n    URL_VARIABLES &lt;- glue(\"https://api.census.gov/data/{year}/acs/acs1/pums/variables.json\")\n    var_info &lt;- httr::GET(URL_VARIABLES)\n    var_info_parsed &lt;- fromJSON(rawToChar(var_info$content))\n    var_info_tibble &lt;- as_tibble(var_info_parsed)$variables\n    if (is.null(subset)) {\n        return(var_info_tibble)\n    }\n    var_data &lt;- list()\n    for (var in subset) {\n        var_data[var] &lt;- var_info_tibble[var]\n    }\n    return(var_data)\n}\n\nis_numeric_variable\n\nfunction (var, var_info_tibble) \n{\n    if (!is.null(var_info_tibble[[var]]$values$range) | var %in% \n        c(\"JWAP\", \"JWDP\")) {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\nget_valid_variable_values\n\nfunction (var, var_info_tibble) \n{\n    var_range &lt;- var_info_tibble[[var]]$values$range\n    var_item &lt;- var_info_tibble[[var]]$values$item\n    ret &lt;- c()\n    if (!is.null(var_item)) {\n        ret &lt;- c(ret, names(var_item))\n    }\n    if (!is.null(var_range)) {\n        min &lt;- as.numeric(var_range$min)\n        max &lt;- as.numeric(var_range$max)\n        ret &lt;- c(ret, c(min = min, max = max))\n    }\n    return(ret)\n}\n\nis_valid_variable_value\n\nfunction (val, var, var_info_tibble) \n{\n    valid_values &lt;- get_valid_variable_values(var, var_info_tibble)\n    if (val %in% valid_values) {\n        return(TRUE)\n    }\n    if (\"min\" %in% names(valid_values) & \"max\" %in% names(valid_values)) {\n        min &lt;- as.numeric(valid_values[\"min\"])\n        max &lt;- as.numeric(valid_values[\"max\"])\n        num_val &lt;- as.numeric(val)\n        return(num_val &gt;= min & num_val &lt;= max)\n    }\n    return(FALSE)\n}\n\nsource(\"test/test_census_variables.R\")\ntest_1\n\nfunction () \n{\n    var_list &lt;- get_variable_list()\n    return(var_list)\n}\n\nstr(tail(test_1(), 3), max.level=4, list.len=6)\n\nList of 3\n $ TEL :List of 6\n  ..$ label           : chr \"Telephone service\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1: chr \"Yes\"\n  .. .. ..$ 0: chr \"N/A (GQ/vacant)\"\n  .. .. ..$ 2: chr \"No\"\n $ TEN :List of 6\n  ..$ label           : chr \"Tenure\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"WGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 5\n  .. .. ..$ 1: chr \"Owned with mortgage or loan (include home equity loans)\"\n  .. .. ..$ 0: chr \"N/A  (GQ/vacant)\"\n  .. .. ..$ 4: chr \"Occupied without payment of rent\"\n  .. .. ..$ 3: chr \"Rented\"\n  .. .. ..$ 2: chr \"Owned Free And Clear\"\n $ MLPJ:List of 6\n  ..$ label           : chr \"Served World War II (December 1941 - December 1946)\"\n  ..$ predicateType   : chr \"int\"\n  ..$ group           : chr \"N/A\"\n  ..$ limit           : int 0\n  ..$ suggested-weight: chr \"PWGTP\"\n  ..$ values          :List of 1\n  .. ..$ item:List of 3\n  .. .. ..$ 1 : chr \"Served This Period\"\n  .. .. ..$ 0 : chr \"Did not serve this period\"\n  .. .. ..$ -1: chr \"N/A (Less than 17 years old/no active duty)\"\n\ntest_2\n\nfunction () \n{\n    var_list &lt;- get_variable_list(subset = c(\"PWGTP\"))\n    return(var_list)\n}\n\nstr(test_2(), max.level = 4, list.len = 6)\n\nList of 1\n $ PWGTP:List of 6\n  ..$ label        : chr \"PUMS person weight\"\n  ..$ predicateType: chr \"int\"\n  ..$ group        : chr \"N/A\"\n  ..$ limit        : int 0\n  ..$ is-weight    : logi TRUE\n  ..$ values       :List of 1\n  .. ..$ range:'data.frame':    1 obs. of  3 variables:\n  .. .. ..$ min        : chr \"1\"\n  .. .. ..$ max        : chr \"9999\"\n  .. .. ..$ description: chr \"Continuous values of PWGTP\"\n\ntest_3\n\nfunction () \n{\n    all_var_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\", \"REGION\", \"DIVISION\", \"ST\")\n    numeric_var_list &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \n        \"JWMNP\", \"PWGTP\")\n    categorical_var_list &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\", \"SEX\", \"REGION\", \"DIVISION\", \"ST\")\n    filtered_var_list &lt;- get_variable_list(subset = all_var_list)\n    for (var in all_var_list) {\n        if (is_numeric_variable(var, filtered_var_list)) {\n            if (!var %in% numeric_var_list) {\n                return(FALSE)\n            }\n        }\n        else {\n            if (!var %in% categorical_var_list) {\n                return(FALSE)\n            }\n        }\n    }\n    return(TRUE)\n}\n\ntest_3()\n\n[1] TRUE\n\ntest_4\n\nfunction () \n{\n    variable_list &lt;- get_variable_list(subset = c(\"SEX\", \"PWGTP\", \n        \"GRPIP\"))\n    cat_only &lt;- get_valid_variable_values(\"SEX\", variable_list)\n    num_only &lt;- get_valid_variable_values(\"PWGTP\", variable_list)\n    both &lt;- get_valid_variable_values(\"GRPIP\", variable_list)\n    return(list(cat_only_SEX = cat_only, num_only_PWGTP = num_only, \n        both_GRPIP = both))\n}\n\ntest_4()\n\n$cat_only_SEX\n[1] \"1\" \"2\"\n\n$num_only_PWGTP\n min  max \n   1 9999 \n\n$both_GRPIP\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n\ntest_5\n\nfunction () \n{\n    variable_list &lt;- get_variable_list(subset = c(\"GRPIP\", \"AGEP\", \n        \"SEX\"))\n    print(\"GRPIP\")\n    print(get_valid_variable_values(\"GRPIP\", variable_list))\n    for (val in c(\"0\", \"101\", \"1\", \"100\", \"45\")) {\n        if (!is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    for (val in c(\"102\", \"00\")) {\n        if (is_valid_variable_value(val, \"GRPIP\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    print(\"AGEP\")\n    print(get_valid_variable_values(\"AGEP\", variable_list))\n    for (val in c(\"00\", \"1\", \"99\", \"45\")) {\n        if (!is_valid_variable_value(val, \"AGEP\", variable_list)) {\n            print(val)\n            return(FALSE)\n        }\n    }\n    for (val in c(\"100\", \"0\")) {\n        if (is_valid_variable_value(val, \"AGEP\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    print(\"SEX\")\n    print(get_valid_variable_values(\"SEX\", variable_list))\n    for (val in c(\"1\", \"2\")) {\n        if (!is_valid_variable_value(val, \"SEX\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    for (val in c(\"0\", \"3\")) {\n        if (is_valid_variable_value(val, \"SEX\", variable_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_5()\n\n[1] \"GRPIP\"\n              min   max \n  \"0\" \"101\"   \"1\" \"100\" \n[1] \"AGEP\"\n      min  max \n\"00\"  \"1\" \"99\" \n[1] \"SEX\"\n[1] \"1\" \"2\"\n\n\n[1] TRUE\n\n\n\n\n\n\nsource(\"src/input_validation.R\")\nis_valid_variable_input\n\nfunction (given_list, valid_list, sep = \"=\", with_delim = FALSE) \n{\n    strip_value &lt;- function(element) {\n        if (with_delim) {\n            return(substr(element, 1, regexpr(sep, element)))\n        }\n        return(strsplit(element, sep)[[1]][1])\n    }\n    if (!all(sapply(given_list, function(x) any(grepl(paste0(\"^\", \n        strip_value(x), \"$\"), valid_list))))) {\n        return(FALSE)\n    }\n    return(TRUE)\n}\n\nsource(\"test/test_input_validation.R\")\ntest_1\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP=abc\", \"PWGTP=123\", \"SEX=\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_1()\n\n[1] TRUE\n\ntest_2\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    valid_given_lists &lt;- list(\"AGEP\", c(\"AGEP\", \"PWGTP\", \"SEX\"), \n        c(\"AGEP:abc\", \"PWGTP:123\", \"SEX:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_2()\n\n[1] TRUE\n\ntest_3\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    valid_given_lists &lt;- list(\"state:\", c(\"state:\", \"division:5\"), \n        c(\"state:\", \"division:\", \"region:\"), c(\"state:abc\", \"division:123\", \n            \"region:\"))\n    for (valid_given_list in valid_given_lists) {\n        if (!is_valid_variable_input(valid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_3()\n\n[1] TRUE\n\ntest_4\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX=1\"), c(\"AGEP\", \"PWGTP:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_4()\n\n[1] TRUE\n\ntest_5\n\nfunction () \n{\n    valid_list &lt;- c(\"AGEP\", \"PWGTP\", \"SEX\")\n    invalid_given_lists &lt;- list(\"AGE\", \"AGEPa\", c(\"AGEP\", \"PWGTP\", \n        \"SAX:1\"), c(\"AGEP\", \"PWGTP=1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\")) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_5()\n\n[1] TRUE\n\ntest_6\n\nfunction () \n{\n    valid_list &lt;- c(\"state:\", \"division:\", \"region:\")\n    invalid_given_lists &lt;- list(\"state\", c(\"state:\", \"division=5\"), \n        c(\"state:\", \"division:\", \"region\"), c(\"state:abc\", \"division:123\", \n            \"ST:1\"))\n    for (invalid_given_list in invalid_given_lists) {\n        if (is_valid_variable_input(invalid_given_list, valid_list, \n            sep = \":\", with_delim = TRUE)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_6()\n\n[1] TRUE\n\n\n\n\n\n\nsource(\"src/post_processing.R\")\nfix_time_interval_categories\n\nfunction (item, value_list) \n{\n    sorted_item &lt;- item[sort(names(item))]\n    item_values &lt;- pivot_longer(as.data.frame(sorted_item), cols = everything(), \n        names_to = NULL, values_to = \"time_intervals\")\n    item_df &lt;- pivot_longer(as.data.frame(item_values), cols = everything(), \n        names_to = NULL, values_to = \"time_intervals\")\n    item_df_transformed &lt;- select(mutate(mutate(mutate(separate_wider_delim(item_df[-1, \n        ], cols = \"time_intervals\", delim = \" to \", names = c(\"left\", \n        \"right\")), left = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", \n        left)), right = gsub(\"a.m.\", \"AM\", gsub(\"p.m.\", \"PM\", \n        right))), left = parse_date_time(left, orders = \"I:M p\", \n        tz = \"UTC\"), right = parse_date_time(right, orders = \"I:M p\", \n        tz = \"UTC\")), midpoint = format(left + (right - left)/2, \n        \"%H:%M:%S\")), \"midpoint\")\n    value_map &lt;- c()\n    for (value in value_list) {\n        if (value == \"0\") {\n            value_map &lt;- c(value_map, \"NA\")\n            next\n        }\n        value_map &lt;- c(value_map, item_df_transformed$midpoint[as.numeric(value)])\n    }\n    return(value_list = value_map)\n}\n\nconvert_columns_to_numeric\n\nfunction (tibble, numeric_item_list, exclude_list = NULL) \n{\n    tibble &lt;- mutate(tibble, across(all_of(numeric_item_list[!numeric_item_list %in% \n        exclude_list]), as.integer))\n    return(tibble)\n}\n\nremove_categorical_row_items_in_numeric\n\nfunction (tibble, variable_info) \n{\n    numeric_columns &lt;- select(tibble, where(is.numeric))\n    for (col in names(numeric_columns)) {\n        min_val &lt;- as.integer(variable_info[[col]]$values$range$min)\n        max_val &lt;- as.integer(variable_info[[col]]$values$range$max)\n        tibble &lt;- filter(tibble, !!sym(col) &gt;= min_val & !!sym(col) &lt;= \n            max_val)\n        return(tibble)\n    }\n}\n\nconvert_categorical_to_factor\n\nfunction (tibble, variable_info) \n{\n    character_columns &lt;- select(tibble, where(is.character))\n    for (col in names(character_columns)) {\n        if (col %in% c(\"JWAP\", \"JWDP\") | (!col %in% names(variable_info) & \n            !col %in% c(\"state\", \"region\", \"division\"))) {\n            next\n        }\n        col_var &lt;- col\n        col_var &lt;- ifelse(col == \"state\", \"ST\", col_var)\n        col_var &lt;- ifelse(col == \"region\", \"REGION\", col_var)\n        col_var &lt;- ifelse(col == \"division\", \"DIVISION\", col_var)\n        item_values &lt;- variable_info[[col_var]]$values$item\n        item_values &lt;- item_values[order(names(item_values))]\n        names(item_values) &lt;- as.character(as.integer(names(item_values)))\n        tibble &lt;- mutate(tibble, `:=`(!!sym(col), factor(!!sym(col), \n            levels = names(item_values), labels = item_values)))\n    }\n    return(tibble)\n}\n\nsource(\"test/test_post_processing.R\")\ntest_1\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = c(\"JWAP\", \n        \"JWDP\"), for_val = \"state:10\"))\n    data &lt;- distinct(data, .keep_all = TRUE)\n    var_filtered &lt;- get_variable_list(\"2022\", c(\"JWAP\", \"JWDP\"))\n    data$JWAP_fixed &lt;- fix_time_interval_categories(var_filtered$JWAP$values$item, \n        data$JWAP)\n    data$JWDP_fixed &lt;- fix_time_interval_categories(var_filtered$JWDP$values$item, \n        data$JWDP)\n    var_filtered$JWAP &lt;- var_filtered$JWAP$values$item[order(names(var_filtered$JWAP$values$item))]\n    var_filtered$JWDP &lt;- var_filtered$JWDP$values$item[order(names(var_filtered$JWDP$values$item))]\n    return(list(data = data, var_info = var_filtered))\n}\n\ndata_1 &lt;- test_1()\nstr(data_1$data)\n\ntibble [771 × 5] (S3: tbl_df/tbl/data.frame)\n $ JWAP      : chr [1:771] \"0\" \"74\" \"76\" \"109\" ...\n $ JWDP      : chr [1:771] \"0\" \"31\" \"31\" \"67\" ...\n $ state     : chr [1:771] \"10\" \"10\" \"10\" \"10\" ...\n $ JWAP_fixed: chr [1:771] \"NA\" \"06:22:00\" \"06:32:00\" \"09:17:00\" ...\n $ JWDP_fixed: chr [1:771] \"NA\" \"06:02:00\" \"06:02:00\" \"09:02:00\" ...\n\nstr(data_1$var_info, max.level=2, list.len=5)\n\nList of 2\n $ JWAP:List of 286\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:04 a.m.\"\n  ..$ 002: chr \"12:05 a.m. to 12:09 a.m.\"\n  ..$ 003: chr \"12:10 a.m. to 12:14 a.m.\"\n  ..$ 004: chr \"12:15 a.m. to 12:19 a.m.\"\n  .. [list output truncated]\n $ JWDP:List of 151\n  ..$ 0  : chr \"N/A (not a worker; worker who worked from home)\"\n  ..$ 001: chr \"12:00 a.m. to 12:29 a.m.\"\n  ..$ 002: chr \"12:30 a.m. to 12:59 a.m.\"\n  ..$ 003: chr \"1:00 a.m. to 1:29 a.m.\"\n  ..$ 004: chr \"1:30 a.m. to 1:59 a.m.\"\n  .. [list output truncated]\n\ntest_2\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = c(\"AGEP\", \n        \"SEX\", \"JWAP\"), for_val = \"state:10\"))\n    data &lt;- convert_columns_to_numeric(data, c(\"AGEP\", \"JWAP\"), \n        \"JWAP\")\n    return(data)\n}\n\ndata_2 &lt;- test_2()\nstr(data_2, max.level=2)\n\ntibble [9,641 × 4] (S3: tbl_df/tbl/data.frame)\n $ AGEP : int [1:9641] 84 39 19 77 18 32 50 23 20 18 ...\n $ SEX  : chr [1:9641] \"2\" \"2\" \"2\" \"2\" ...\n $ JWAP : chr [1:9641] \"0\" \"0\" \"0\" \"0\" ...\n $ state: chr [1:9641] \"10\" \"10\" \"10\" \"10\" ...\n\ntest_3\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = \"AGEP\", \n        for_val = \"state:10\"))\n    var_filtered &lt;- get_variable_list(\"2022\", \"AGEP\")\n    data &lt;- remove_categorical_row_items_in_numeric(convert_columns_to_numeric(distinct(data, \n        .keep_all = TRUE), c(\"AGEP\")), var_filtered)\n    return(list(data = data, var_info = var_filtered))\n}\n\ndata_3 &lt;- test_3()\n# doesnt have 0 in the int list anymore\nhead(table(data_3$data$AGEP), 5)\n\n\n1 2 3 4 5 \n1 1 1 1 1 \n\ntest_4\n\nfunction () \n{\n    data &lt;- census_tibble(census_url(year = \"2022\", get_vals = c(\"AGEP\", \n        \"SEX\", \"HISPEED\"), for_val = \"state:10\"))\n    var_filtered &lt;- get_variable_list(\"2022\", c(\"AGEP\", \"SEX\", \n        \"HISPEED\", \"ST\"))\n    data$SEX_saved &lt;- data$SEX\n    data$HISPEED_saved &lt;- data$HISPEED\n    data$ST_saved &lt;- data$state\n    data &lt;- convert_categorical_to_factor(remove_categorical_row_items_in_numeric(convert_columns_to_numeric(distinct(data, \n        .keep_all = TRUE), \"AGEP\"), var_filtered), var_filtered)\n    var_filtered$AGEP &lt;- var_filtered$AGEP$values\n    var_filtered$SEX &lt;- var_filtered$SEX$values$item[order(names(var_filtered$SEX$values$item))]\n    var_filtered$HISPEED &lt;- var_filtered$HISPEED$values$item[order(names(var_filtered$HISPEED$values$item))]\n    var_filtered$ST &lt;- var_filtered$ST$values$item[order(names(var_filtered$ST$values$item))]\n    return(list(data = data, var_info = var_filtered))\n}\n\ndata_4 &lt;- test_4()\nstr(data_4$data)\n\ntibble [513 × 7] (S3: tbl_df/tbl/data.frame)\n $ AGEP         : int [1:513] 84 39 19 77 18 32 50 23 20 93 ...\n $ SEX          : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ HISPEED      : Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ state        : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n $ SEX_saved    : chr [1:513] \"2\" \"2\" \"2\" \"2\" ...\n $ HISPEED_saved: chr [1:513] \"0\" \"0\" \"0\" \"0\" ...\n $ ST_saved     : chr [1:513] \"10\" \"10\" \"10\" \"10\" ...\n\nstr(data_4$var_info, max.level=3, list.len=5)\n\nList of 4\n $ AGEP   :List of 2\n  ..$ item :List of 1\n  .. ..$ 00: chr \"Under 1 year\"\n  ..$ range:'data.frame':   1 obs. of  3 variables:\n  .. ..$ min        : chr \"1\"\n  .. ..$ max        : chr \"99\"\n  .. ..$ description: chr \"1 to 99 years (Top-coded***)\"\n $ SEX    :List of 2\n  ..$ 1: chr \"Male\"\n  ..$ 2: chr \"Female\"\n $ HISPEED:List of 3\n  ..$ 0: chr \"N/A (GQ/vacant/no paid access to the internet)\"\n  ..$ 1: chr \"Yes\"\n  ..$ 2: chr \"No\"\n $ ST     :List of 52\n  ..$ 01: chr \"Alabama/AL\"\n  ..$ 02: chr \"Alaska/AK\"\n  ..$ 04: chr \"Arizona/AZ\"\n  ..$ 05: chr \"Arkansas/AR\"\n  ..$ 06: chr \"California/CA\"\n  .. [list output truncated]\n\n\n\n\n\n\nsource(\"src/main.R\")\nget_data\n\nfunction (year = \"2022\", variables = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    geography_level = \"state:10\") \n{\n    if (!any(grepl(\"^PWGTP$\", variables))) {\n        variables &lt;- c(variables, \"PWGTP\")\n    }\n    year_options &lt;- c(2010:2022)\n    if (!year %in% year_options) {\n        stop(glue(\"Invalid year {year}, should be one of [{glue_collapse(year_options, sep=', ')}]\"))\n    }\n    variable_options &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\")\n    if (!is_valid_variable_input(variables, variable_options)) {\n        stop(glue(\"Invalid variable in [{glue_collapse(variables, sep=', ')}], valid options [{glue_collapse(variable_options, sep=', ')}]\"))\n    }\n    geography_options &lt;- c(\"state:\", \"region:\", \"division:\")\n    if (geography_level != \"\" & !is_valid_variable_input(geography_level, \n        geography_options, sep = \":\", with_delim = TRUE)) {\n        stop(glue(\"Invalid geography level {geography_level}, should be 'all' or one of [{glue_collapse(geography_options, sep=', ')}]\"))\n    }\n    filtered_var_info &lt;- get_variable_list(year, c(variable_options, \n        \"ST\", \"REGION\", \"DIVISION\"))\n    for (var in names(filtered_var_info)) {\n        if (is.null(filtered_var_info[[var]]) | is.null(filtered_var_info[[var]]$values)) {\n            print(paste0(\"removing \", var, \" from year \", year))\n            filtered_var_info &lt;- filtered_var_info[!names(filtered_var_info) %in% \n                var]\n            for (var2 in variables) {\n                if (any(grepl(var, var2))) {\n                  print(paste0(\"removing variable \", var2, \" from year \", \n                    year))\n                  variables &lt;- variables[variables != var2]\n                }\n            }\n        }\n    }\n    newest_geography_variables &lt;- get_variable_list(2022, c(\"ST\", \n        \"REGION\", \"DIVISION\"))\n    filtered_var_info &lt;- c(filtered_var_info, newest_geography_variables)\n    numeric_items_count &lt;- 0\n    categorical_items_count &lt;- 0\n    numeric_item_list &lt;- c()\n    for (var in variables) {\n        var_split &lt;- strsplit(var, \"=\")[[1]]\n        var &lt;- var_split[1]\n        values &lt;- var_split[2]\n        if (is_numeric_variable(var, filtered_var_info)) {\n            numeric_item_list &lt;- c(numeric_item_list, var)\n            numeric_items_count &lt;- numeric_items_count + 1\n        }\n        else {\n            categorical_items_count &lt;- categorical_items_count + \n                1\n        }\n    }\n    if (numeric_items_count &lt;= 1) {\n        variables &lt;- c(variables, \"AGEP\")\n        numeric_item_list &lt;- c(numeric_item_list, \"AGEP\")\n    }\n    if (categorical_items_count == 0) {\n        variables &lt;- c(variables, \"SEX\")\n    }\n    var_with_filter &lt;- c()\n    for (var in variables) {\n        if (regexpr(\"=\", var) != -1) {\n            var_with_filter &lt;- c(var_with_filter, var)\n            variables &lt;- variables[variables != var]\n        }\n    }\n    URL &lt;- census_url(year = year, get_vals = variables, get_vals_subset = var_with_filter, \n        for_val = geography_level)\n    parsed_tibble &lt;- census_tibble(URL)\n    if (\"JWAP\" %in% names(parsed_tibble)) {\n        parsed_tibble$JWAP &lt;- fix_time_interval_categories(filtered_var_info$JWAP$values$item, \n            parsed_tibble$JWAP)\n    }\n    if (\"JWDP\" %in% names(parsed_tibble)) {\n        parsed_tibble$JWDP &lt;- fix_time_interval_categories(filtered_var_info$JWDP$values$item, \n            parsed_tibble$JWDP)\n    }\n    parsed_tibble &lt;- convert_categorical_to_factor(remove_categorical_row_items_in_numeric(convert_columns_to_numeric(parsed_tibble, \n        numeric_item_list, exclude_list = c(\"JWDP\", \"JWAP\")), \n        filtered_var_info), filtered_var_info)\n    return(list(parsed = parsed_tibble, var_info = filtered_var_info, \n        URL = URL))\n}\n\nget_data_years\n\nfunction (years = \"2022\", variables = c(\"AGEP\", \"PWGTP\", \"SEX\"), \n    geography_level = \"state:10\") \n{\n    years &lt;- years[years != 2020]\n    results &lt;- lapply(years, function(year) get_data(year = year, \n        variables = variables, geography_level = geography_level))\n    names(results) &lt;- years\n    return(results)\n}\n\nsource(\"test/test_main.R\")\ntest_1\n\nfunction () \n{\n    year &lt;- \"2022\"\n    variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\")\n    geography_level &lt;- \"state:10\"\n    return_data &lt;- get_data(year = year, variables = variable_list, \n        geography_level = geography_level)\n    return(return_data)\n}\n\ndata_1 &lt;- test_1()\ndata_1$URL\n\nhttps://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JWTRNS,SCH,SCHL&for=state:10\n\nstr(data_1$parsed)\n\ntibble [9,569 × 15] (S3: tbl_df/tbl/data.frame)\n $ AGEP   : int [1:9569] 84 39 19 77 18 32 50 23 20 18 ...\n $ PWGTP  : int [1:9569] 76 20 92 19 32 80 132 19 47 201 ...\n $ GASP   : int [1:9569] 3 3 3 3 3 3 3 3 3 3 ...\n $ GRPIP  : int [1:9569] 0 0 0 0 0 0 0 0 0 0 ...\n $ JWAP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWDP   : chr [1:9569] \"NA\" \"NA\" \"NA\" \"NA\" ...\n $ JWMNP  : int [1:9569] 0 0 0 0 0 0 0 20 0 0 ...\n $ SEX    : Factor w/ 2 levels \"Male\",\"Female\": 2 2 2 2 2 1 1 1 2 2 ...\n $ FER    : Factor w/ 3 levels \"N/A (less than 15 years/greater than 50 years/ male)\",..: 1 3 3 1 3 1 1 1 3 3 ...\n $ HHL    : Factor w/ 6 levels \"N/A (GQ/vacant)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ HISPEED: Factor w/ 3 levels \"N/A (GQ/vacant/no paid access to the internet)\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ JWTRNS : Factor w/ 13 levels \"N/A (not a worker-not in the labor force, including persons under 16 years; unemployed; employed, with a job bu\"| __truncated__,..: 1 1 1 1 1 1 1 2 1 1 ...\n $ SCH    : Factor w/ 4 levels \"N/A (less than 3 years old)\",..: 2 2 3 2 3 2 2 4 3 3 ...\n $ SCHL   : Factor w/ 25 levels \"N/A (less than 3 years old)\",..: 22 17 20 22 17 17 22 22 20 17 ...\n $ state  : Factor w/ 52 levels \"Alabama/AL\",\"Alaska/AK\",..: 8 8 8 8 8 8 8 8 8 8 ...\n\ntest_2\n\nfunction () \n{\n    years &lt;- c(2010:2022)\n    variable_list &lt;- c(\"AGEP\", \"PWGTP\", \"GASP\", \"GRPIP\", \"JWAP\", \n        \"JWDP\", \"JWMNP\", \"SEX\", \"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \n        \"SCH\", \"SCHL\")\n    geography_level &lt;- \"state:10\"\n    return_data &lt;- get_data_years(years = years, variables = variable_list, \n        geography_level = geography_level)\n    return(return_data)\n}\n\ndata_2 &lt;- test_2()\n\n[1] \"removing HISPEED from year 2010\"\n[1] \"removing variable HISPEED from year 2010\"\n[1] \"removing JWTRNS from year 2010\"\n[1] \"removing variable JWTRNS from year 2010\"\n[1] \"removing ST from year 2010\"\n[1] \"removing HISPEED from year 2011\"\n[1] \"removing variable HISPEED from year 2011\"\n[1] \"removing JWTRNS from year 2011\"\n[1] \"removing variable JWTRNS from year 2011\"\n[1] \"removing ST from year 2011\"\n[1] \"removing HISPEED from year 2012\"\n[1] \"removing variable HISPEED from year 2012\"\n[1] \"removing JWTRNS from year 2012\"\n[1] \"removing variable JWTRNS from year 2012\"\n[1] \"removing ST from year 2012\"\n[1] \"removing HISPEED from year 2013\"\n[1] \"removing variable HISPEED from year 2013\"\n[1] \"removing JWTRNS from year 2013\"\n[1] \"removing variable JWTRNS from year 2013\"\n[1] \"removing ST from year 2013\"\n[1] \"removing HISPEED from year 2014\"\n[1] \"removing variable HISPEED from year 2014\"\n[1] \"removing JWTRNS from year 2014\"\n[1] \"removing variable JWTRNS from year 2014\"\n[1] \"removing ST from year 2014\"\n[1] \"removing HISPEED from year 2015\"\n[1] \"removing variable HISPEED from year 2015\"\n[1] \"removing JWTRNS from year 2015\"\n[1] \"removing variable JWTRNS from year 2015\"\n[1] \"removing ST from year 2015\"\n[1] \"removing JWTRNS from year 2016\"\n[1] \"removing variable JWTRNS from year 2016\"\n[1] \"removing ST from year 2016\"\n[1] \"removing JWTRNS from year 2017\"\n[1] \"removing variable JWTRNS from year 2017\"\n[1] \"removing ST from year 2017\"\n[1] \"removing JWTRNS from year 2018\"\n[1] \"removing variable JWTRNS from year 2018\"\n[1] \"removing ST from year 2018\"\n[1] \"removing ST from year 2019\"\n\nstr(data_2, max.level = 2)\n\nList of 12\n $ 2010:List of 3\n  ..$ parsed  : tibble [8,494 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2010/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2011:List of 3\n  ..$ parsed  : tibble [8,906 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2011/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2012:List of 3\n  ..$ parsed  : tibble [8,733 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2013:List of 3\n  ..$ parsed  : tibble [8,682 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2013/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2014:List of 3\n  ..$ parsed  : tibble [8,923 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2014/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2015:List of 3\n  ..$ parsed  : tibble [8,926 × 13] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 17\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2015/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,SCH,SCHL&for=state:10\"\n $ 2016:List of 3\n  ..$ parsed  : tibble [8,801 × 14] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 18\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2016/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2017:List of 3\n  ..$ parsed  : tibble [8,868 × 14] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 18\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2017/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2018:List of 3\n  ..$ parsed  : tibble [9,043 × 14] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 18\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2018/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,SC\"| __truncated__\n $ 2019:List of 3\n  ..$ parsed  : tibble [9,197 × 15] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 19\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2021:List of 3\n  ..$ parsed  : tibble [9,361 × 15] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 20\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__\n $ 2022:List of 3\n  ..$ parsed  : tibble [9,569 × 15] (S3: tbl_df/tbl/data.frame)\n  ..$ var_info:List of 20\n  ..$ URL     : 'glue' chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,GASP,GRPIP,JWAP,JWDP,JWMNP,SEX,FER,HHL,HISPEED,JW\"| __truncated__"
  }
]